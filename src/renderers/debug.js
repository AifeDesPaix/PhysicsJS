/*
 * @requires renderers/canvas
 */
/**
 * class DebugRenderer < Renderer
 *
 * Physics.renderer('debug')
 *
 * Extends canvas renderer with special debugging functionality.
 *
 * Additional config options:
 *
 * - debug: Draw debug shapes and bounding boxes. (default: `false`)
 * - metaEl: HTMLElement to write meta information like FPS and IPF into. (default: autogenerated)
 * - offset: Offset the shapes by this amount. (default: `{ x: 0, y: 0 }`)
 * - styles: Styles to use to draw the shapes. (see below)
 *
 * The styles property should contain _default_ styles for each shape you want to draw.
 *
 * Example:
 *
 * ```javascript
 * styles: {
 *
 *    'circle' : {
 *        strokeStyle: '#542437',
 *        lineWidth: 1,
 *        fillStyle: '#542437',
 *        angleIndicator: 'white'
 *    },
 *
 *    'convex-polygon' : {
 *        strokeStyle: '#542437',
 *        lineWidth: 1,
 *        fillStyle: '#542437',
 *        angleIndicator: 'white'
 *    }
 * }
 * ```
 **/
Physics.renderer('debug', 'canvas', function( parent, proto ){

    if ( !document ){
        // must be in node environment
        return {};
    }

    var defaults = {

        // the element to place meta data into
        metaEl: null,
        offset: { x: 0, y: 0 },
        // draw aabbs of bodies for debugging
        drawAABB: true,
        drawRealPosition: false,

        //colors
        // color of the aabbs
        aabbColor: 'rgba(0, 0, 255, 0.1)',
        // styles used to draw the image of the body at its true non-interpolated position
        realBodyStyle: 'rgba(255, 0, 0, 0.5)'
    };

    return {

        // extended
        init: function( options ){

            var self = this;

            // call parent init
            parent.init.call(this, options);

            this.options.defaults( defaults, true );
            this.options( options, true );
        },

        drawBody: function( body, view, ctx, offset ){

            var pos = body.state.pos
                ,v = body.state.vel
                ,t = this._interpolateTime || 0
                ,x
                ,y
                ,ang
                ,aabb
                ;

            offset = offset || this.options.offset;
            ctx = ctx || this.ctx;

            // interpolate positions
            x = pos.x + offset.x + v.x * t;
            y = pos.y + offset.y + v.y * t;
            ang = body.state.angular.pos + body.state.angular.vel * t;

            ctx.save();
            ctx.translate( x, y );
            ctx.rotate( ang );
            ctx.drawImage(view, -view.width/2, -view.height/2, view.width, view.height);
            ctx.restore();

            if ( this.options.drawAABB ){
                aabb = body.aabb();
                // draw bounding boxes
                this.drawRect( aabb.x, aabb.y, 2 * aabb.hw, 2 * aabb.hh, this.options.aabbColor );
            }

            if ( this.options.drawRealPosition ){
                // draw the non-interpolated body position
                body._debugView = body._debugView || this.createView(body.geometry, this.options.realBodyStyle);
                ctx.save();
                ctx.translate(pos.x + offset.x, pos.y + offset.y);
                ctx.rotate(body.state.angular.pos);
                ctx.drawImage(body._debugView, -body._debugView.width * 0.5, -body._debugView.height * 0.5);
                ctx.restore();
            }
        }
    };
});
