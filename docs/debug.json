{
  "files": [
    "src/core/behavior.js",
    "src/core/world.js",
    "src/intro.js",
    "src/util/decorator.js",
    "src/util/helpers.js",
    "src/util/noconflict.js",
    "src/util/pubsub.js",
    "src/util/scratchpad.js",
    "src/util/ticker.js"
  ],
  "list": {
    "Physics.behavior": {
      "id": "Physics.behavior",
      "type": "class method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "name",
              "types": [
                "String"
              ],
              "description": " The name of the behavior to create\n\n "
            },
            {
              "name": "options",
              "optional": true,
              "types": [
                "Object"
              ],
              "description": " The configuration for that behavior ( depends on behavior )\n\n "
            }
          ],
          "returns": [
            {
              "type": "Behavior"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "name",
          "types": [
            "String"
          ],
          "description": " The name of the behavior to create\n\n "
        },
        {
          "name": "options",
          "types": [
            "Object"
          ],
          "description": " The configuration for that behavior ( depends on behavior )\n\n "
        }
      ],
      "related_to": "Physics.util.decorator",
      "description": "Factory function for creating Behaviors.\n\nVisit [the PhysicsJS wiki on Behaviors](https://github.com/wellcaffeinated/PhysicsJS/wiki/Behaviors)\nfor usage documentation.",
      "short_description": "Factory function for creating Behaviors.\n",
      "line": 17,
      "aliases": [],
      "children": [],
      "file": "src/core/behavior.js",
      "name": "behavior",
      "name_prefix": "Physics.",
      "path": "Physics.behavior",
      "outFile": "behavior.html#Physics.behavior"
    },
    "Behavior": {
      "id": "Behavior",
      "type": "class",
      "belongs_to": "Classes",
      "description": "The base class for behaviors created by [[Physics.behavior]].",
      "short_description": "The base class for behaviors created by [[Physics.behavior]].",
      "line": 24,
      "aliases": [],
      "children": [
        {
          "id": "Behavior#behave",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "data",
                  "types": [
                    "Object"
                  ],
                  "description": " The pubsub `integrate:positions` event data\n\n     "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "data",
              "types": [
                "Object"
              ],
              "description": " The pubsub `integrate:positions` event data\n\n     "
            }
          ],
          "description": "Default method run on every world integration.\n\nYou _must_ extend this when creating a behavior,\nunless you extend the [[Behavior#connect]] and [[Behavior#disconnect]] methods.",
          "short_description": "Default method run on every world integration.\n",
          "line": 128,
          "aliases": [],
          "children": [],
          "file": "src/core/behavior.js",
          "name": "behave",
          "name_prefix": "Behavior#",
          "path": "Behavior.prototype.behave",
          "outFile": "behavior.html#Behavior.prototype.behave"
        },
        {
          "id": "Behavior#connect",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "world",
                  "types": [
                    "Physics.world"
                  ],
                  "description": " The world to connect to\n\n     "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "world",
              "types": [
                "Physics.world"
              ],
              "description": " The world to connect to\n\n     "
            }
          ],
          "description": "Connect to a world.\n\nExtend this when creating behaviors if you need to specify pubsub management.\nAutomatically called when added to world by the [[Behavior#setWorld]] method.",
          "short_description": "Connect to a world.\n",
          "line": 96,
          "aliases": [],
          "children": [],
          "file": "src/core/behavior.js",
          "name": "connect",
          "name_prefix": "Behavior#",
          "path": "Behavior.prototype.connect",
          "outFile": "behavior.html#Behavior.prototype.connect"
        },
        {
          "id": "Behavior#disconnect",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "world",
                  "types": [
                    "Physics.world"
                  ],
                  "description": " The world to disconnect from\n\n     "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "world",
              "types": [
                "Physics.world"
              ],
              "description": " The world to disconnect from\n\n     "
            }
          ],
          "description": "Disconnect from a world.\n\nExtend this when creating behaviors if you need to specify pubsub management.\nAutomatically called when added to world by the [[Behavior#setWorld]] method.",
          "short_description": "Disconnect from a world.\n",
          "line": 112,
          "aliases": [],
          "children": [],
          "file": "src/core/behavior.js",
          "name": "disconnect",
          "name_prefix": "Behavior#",
          "path": "Behavior.prototype.disconnect",
          "outFile": "behavior.html#Behavior.prototype.disconnect"
        },
        {
          "id": "Behavior#getTargets",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [],
              "returns": [
                {
                  "type": "Array"
                }
              ]
            }
          ],
          "returns": [
            {
              "type": "Array",
              "description": " The array of bodies (by reference!) this behavior is applied to.\n\n     "
            }
          ],
          "description": "Get the array of bodies (by reference!) this behavior is applied to.",
          "short_description": "Get the array of bodies (by reference!) this behavior is applied to.",
          "line": 59,
          "aliases": [],
          "children": [],
          "file": "src/core/behavior.js",
          "name": "getTargets",
          "name_prefix": "Behavior#",
          "path": "Behavior.prototype.getTargets",
          "outFile": "behavior.html#Behavior.prototype.getTargets"
        },
        {
          "id": "Behavior#init",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "options",
                  "types": [
                    "Object"
                  ],
                  "description": " The configuration options passed by the factory\n\n     "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "options",
              "types": [
                "Object"
              ],
              "description": " The configuration options passed by the factory\n\n     "
            }
          ],
          "internal": true,
          "description": "Initialization. Internal use.\n/\n       init: function( options ){\n           \n           this.options = Physics.util.options( defaults );\n           this.options( options );\n       },\n\n       /**\nBehavior#applyTo( arr ) -> this\n- arr (Array): Array of bodies to apply this behavior to. Specify `true` for all objects in world.\n\nApply the behavior to a group of bodies.",
          "short_description": "Initialization. Internal use.\n/\n       init: function( options ){\n           \n           this.options = Physics.util.options( defaults );\n           this.options( options );\n       },\n",
          "line": 43,
          "aliases": [],
          "children": [],
          "file": "src/core/behavior.js",
          "name": "init",
          "name_prefix": "Behavior#",
          "path": "Behavior.prototype.init",
          "outFile": "behavior.html#Behavior.prototype.init"
        },
        {
          "id": "Behavior#setWorld",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "world",
                  "types": [
                    "Object"
                  ],
                  "description": " The world (or null)\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "world",
              "types": [
                "Object"
              ],
              "description": " The world (or null)\n\n     "
            }
          ],
          "description": "Set which world to apply to.\n\nUsually this is called internally. Shouldn't be a need to call this yourself usually.",
          "short_description": "Set which world to apply to.\n",
          "line": 72,
          "aliases": [],
          "children": [],
          "file": "src/core/behavior.js",
          "name": "setWorld",
          "name_prefix": "Behavior#",
          "path": "Behavior.prototype.setWorld",
          "outFile": "behavior.html#Behavior.prototype.setWorld"
        }
      ],
      "file": "src/core/behavior.js",
      "subclasses": [],
      "name": "Behavior",
      "path": "Behavior",
      "outFile": "behavior.html"
    },
    "Behavior#init": {
      "id": "Behavior#init",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "options",
              "types": [
                "Object"
              ],
              "description": " The configuration options passed by the factory\n\n     "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "options",
          "types": [
            "Object"
          ],
          "description": " The configuration options passed by the factory\n\n     "
        }
      ],
      "internal": true,
      "description": "Initialization. Internal use.\n/\n       init: function( options ){\n           \n           this.options = Physics.util.options( defaults );\n           this.options( options );\n       },\n\n       /**\nBehavior#applyTo( arr ) -> this\n- arr (Array): Array of bodies to apply this behavior to. Specify `true` for all objects in world.\n\nApply the behavior to a group of bodies.",
      "short_description": "Initialization. Internal use.\n/\n       init: function( options ){\n           \n           this.options = Physics.util.options( defaults );\n           this.options( options );\n       },\n",
      "line": 43,
      "aliases": [],
      "children": [],
      "file": "src/core/behavior.js",
      "name": "init",
      "name_prefix": "Behavior#",
      "path": "Behavior.prototype.init",
      "outFile": "behavior.html#Behavior.prototype.init"
    },
    "Behavior#getTargets": {
      "id": "Behavior#getTargets",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [],
          "returns": [
            {
              "type": "Array"
            }
          ]
        }
      ],
      "returns": [
        {
          "type": "Array",
          "description": " The array of bodies (by reference!) this behavior is applied to.\n\n     "
        }
      ],
      "description": "Get the array of bodies (by reference!) this behavior is applied to.",
      "short_description": "Get the array of bodies (by reference!) this behavior is applied to.",
      "line": 59,
      "aliases": [],
      "children": [],
      "file": "src/core/behavior.js",
      "name": "getTargets",
      "name_prefix": "Behavior#",
      "path": "Behavior.prototype.getTargets",
      "outFile": "behavior.html#Behavior.prototype.getTargets"
    },
    "Behavior#setWorld": {
      "id": "Behavior#setWorld",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "world",
              "types": [
                "Object"
              ],
              "description": " The world (or null)\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "world",
          "types": [
            "Object"
          ],
          "description": " The world (or null)\n\n     "
        }
      ],
      "description": "Set which world to apply to.\n\nUsually this is called internally. Shouldn't be a need to call this yourself usually.",
      "short_description": "Set which world to apply to.\n",
      "line": 72,
      "aliases": [],
      "children": [],
      "file": "src/core/behavior.js",
      "name": "setWorld",
      "name_prefix": "Behavior#",
      "path": "Behavior.prototype.setWorld",
      "outFile": "behavior.html#Behavior.prototype.setWorld"
    },
    "Behavior#connect": {
      "id": "Behavior#connect",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "world",
              "types": [
                "Physics.world"
              ],
              "description": " The world to connect to\n\n     "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "world",
          "types": [
            "Physics.world"
          ],
          "description": " The world to connect to\n\n     "
        }
      ],
      "description": "Connect to a world.\n\nExtend this when creating behaviors if you need to specify pubsub management.\nAutomatically called when added to world by the [[Behavior#setWorld]] method.",
      "short_description": "Connect to a world.\n",
      "line": 96,
      "aliases": [],
      "children": [],
      "file": "src/core/behavior.js",
      "name": "connect",
      "name_prefix": "Behavior#",
      "path": "Behavior.prototype.connect",
      "outFile": "behavior.html#Behavior.prototype.connect"
    },
    "Behavior#disconnect": {
      "id": "Behavior#disconnect",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "world",
              "types": [
                "Physics.world"
              ],
              "description": " The world to disconnect from\n\n     "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "world",
          "types": [
            "Physics.world"
          ],
          "description": " The world to disconnect from\n\n     "
        }
      ],
      "description": "Disconnect from a world.\n\nExtend this when creating behaviors if you need to specify pubsub management.\nAutomatically called when added to world by the [[Behavior#setWorld]] method.",
      "short_description": "Disconnect from a world.\n",
      "line": 112,
      "aliases": [],
      "children": [],
      "file": "src/core/behavior.js",
      "name": "disconnect",
      "name_prefix": "Behavior#",
      "path": "Behavior.prototype.disconnect",
      "outFile": "behavior.html#Behavior.prototype.disconnect"
    },
    "Behavior#behave": {
      "id": "Behavior#behave",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "data",
              "types": [
                "Object"
              ],
              "description": " The pubsub `integrate:positions` event data\n\n     "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "data",
          "types": [
            "Object"
          ],
          "description": " The pubsub `integrate:positions` event data\n\n     "
        }
      ],
      "description": "Default method run on every world integration.\n\nYou _must_ extend this when creating a behavior,\nunless you extend the [[Behavior#connect]] and [[Behavior#disconnect]] methods.",
      "short_description": "Default method run on every world integration.\n",
      "line": 128,
      "aliases": [],
      "children": [],
      "file": "src/core/behavior.js",
      "name": "behave",
      "name_prefix": "Behavior#",
      "path": "Behavior.prototype.behave",
      "outFile": "behavior.html#Behavior.prototype.behave"
    },
    "Physics.world": {
      "id": "Physics.world",
      "type": "class",
      "related_to": "new Physics.world",
      "description": "The world class and factory function.\n\nHere is a test link [[ new Physics.world ]]\n\nExample:\n\n```javascript\nPhysics( cfg, function( world ) {\n    // use world\n\n}); // returns world\n```",
      "short_description": "The world class and factory function.\n",
      "line": 17,
      "aliases": [],
      "children": [
        {
          "id": "Physics.world#add",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "things",
                  "types": [
                    "Object",
                    "Array"
                  ],
                  "description": " The thing, or array of things (body, behavior, integrator, or renderer) to add.\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "things",
              "types": [
                "Object",
                "Array"
              ],
              "description": " The thing, or array of things (body, behavior, integrator, or renderer) to add.\n\n     "
            }
          ],
          "chainable": true,
          "description": "Multipurpose add method. Add one or many bodies, behaviors, integrators, renderers...",
          "short_description": "Multipurpose add method. Add one or many bodies, behaviors, integrators, renderers...",
          "line": 143,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "add",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.add",
          "outFile": "world.html#Physics.world.prototype.add"
        },
        {
          "id": "Physics.world#addBehavior",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "behavior",
                  "types": [
                    "Behavior"
                  ],
                  "description": " The behavior to add\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "behavior",
              "types": [
                "Behavior"
              ],
              "description": " The behavior to add\n\n     "
            }
          ],
          "chainable": true,
          "description": "Add a behavior to the world",
          "short_description": "Add a behavior to the world",
          "line": 390,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "addBehavior",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.addBehavior",
          "outFile": "world.html#Physics.world.prototype.addBehavior"
        },
        {
          "id": "Physics.world#addBody",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "body",
                  "types": [
                    "Body"
                  ],
                  "description": " The behavior to add\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "body",
              "types": [
                "Body"
              ],
              "description": " The behavior to add\n\n     "
            }
          ],
          "chainable": true,
          "description": "Add a body to the world",
          "short_description": "Add a body to the world",
          "line": 458,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "addBody",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.addBody",
          "outFile": "world.html#Physics.world.prototype.addBody"
        },
        {
          "id": "Physics.world#destroy",
          "type": "instance method",
          "signatures": [
            {
              "arguments": []
            }
          ],
          "description": "Destroy the world.\n(Bwahahahahaha!)",
          "short_description": "Destroy the world.\n(Bwahahahahaha!)",
          "line": 672,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "destroy",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.destroy",
          "outFile": "world.html#Physics.world.prototype.destroy"
        },
        {
          "id": "Physics.world#find",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "rules",
                  "types": [
                    "Object"
                  ],
                  "description": " Query rules\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Array"
                }
              ]
            },
            {
              "arguments": [
                {
                  "name": "filter",
                  "arguments": [
                    {
                      "name": "body",
                      "description": " Each body in the world\n\n     ",
                      "types": [
                        "Body"
                      ]
                    }
                  ],
                  "callback": true,
                  "types": [
                    "Function"
                  ],
                  "description": " Filter function called to check bodies\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Array"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "rules",
              "types": [
                "Object"
              ],
              "description": " Query rules\n\n     "
            },
            {
              "name": "filter",
              "types": [
                "Function"
              ],
              "description": " Filter function called to check bodies\n\n     "
            },
            {
              "name": "body",
              "types": [
                "Body"
              ],
              "description": " Each body in the world\n\n     "
            }
          ],
          "related_to": "Physics.query",
          "description": "Find all matching bodies based on query rules.",
          "short_description": "Find all matching bodies based on query rules.",
          "line": 547,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "find",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.find",
          "outFile": "world.html#Physics.world.prototype.find"
        },
        {
          "id": "Physics.world#findOne",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "rules",
                  "types": [
                    "Object"
                  ],
                  "description": " Query rules.\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Body"
                },
                {
                  "type": false
                }
              ]
            },
            {
              "arguments": [
                {
                  "name": "filter",
                  "arguments": [
                    {
                      "name": "body",
                      "description": " Each body in the world\n\n     ",
                      "types": [
                        "Body"
                      ]
                    }
                  ],
                  "callback": true,
                  "types": [
                    "Function"
                  ],
                  "description": " Filter function called to check bodies\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Body"
                },
                {
                  "type": false
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "rules",
              "types": [
                "Object"
              ],
              "description": " Query rules.\n\n     "
            },
            {
              "name": "filter",
              "types": [
                "Function"
              ],
              "description": " Filter function called to check bodies\n\n     "
            },
            {
              "name": "body",
              "types": [
                "Body"
              ],
              "description": " Each body in the world\n\n     "
            }
          ],
          "related_to": "Physics.query",
          "description": "Find first matching body based on query rules.",
          "short_description": "Find first matching body based on query rules.",
          "line": 529,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "findOne",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.findOne",
          "outFile": "world.html#Physics.world.prototype.findOne"
        },
        {
          "id": "Physics.world#getBehaviors",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [],
              "returns": [
                {
                  "type": "Array"
                }
              ]
            }
          ],
          "returns": [
            {
              "type": "Array",
              "description": " Array of behaviors\n\n     "
            }
          ],
          "description": "Get copied list of behaviors in the world",
          "short_description": "Get copied list of behaviors in the world",
          "line": 415,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "getBehaviors",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.getBehaviors",
          "outFile": "world.html#Physics.world.prototype.getBehaviors"
        },
        {
          "id": "Physics.world#getBodies",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [],
              "returns": [
                {
                  "type": "Array"
                }
              ]
            }
          ],
          "returns": [
            {
              "type": "Array",
              "description": " Array of bodies\n\n     "
            }
          ],
          "description": "Get copied list of bodies in the world",
          "short_description": "Get copied list of bodies in the world",
          "line": 483,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "getBodies",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.getBodies",
          "outFile": "world.html#Physics.world.prototype.getBodies"
        },
        {
          "id": "Physics.world#has",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "thing",
                  "types": [
                    "Object"
                  ],
                  "description": " The thing to test\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Boolean",
                  "description": " `true` if thing is in the world, `false` otherwise.\n\n     "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "thing",
              "types": [
                "Object"
              ],
              "description": " The thing to test\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Boolean",
              "description": " `true` if thing is in the world, `false` otherwise.\n\n     "
            }
          ],
          "chainable": true,
          "description": "Determine if a thing has been added to world.",
          "short_description": "Determine if a thing has been added to world.",
          "line": 244,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "has",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.has",
          "outFile": "world.html#Physics.world.prototype.has"
        },
        {
          "id": "Physics.world#init",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "options",
                  "optional": true,
                  "types": [
                    "Object"
                  ],
                  "description": " configuration options (see constructor)\n\n     "
                },
                {
                  "name": "fn",
                  "arguments": [
                    {
                      "name": "world"
                    },
                    {
                      "name": "Physics"
                    }
                  ],
                  "callback": true,
                  "optional": true,
                  "types": [
                    "Function",
                    "Array"
                  ],
                  "description": " Callback function or array of callbacks called with this === world\n\n     "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "options",
              "types": [
                "Object"
              ],
              "description": " configuration options (see constructor)\n\n     "
            },
            {
              "name": "fn",
              "types": [
                "Function",
                "Array"
              ],
              "description": " Callback function or array of callbacks called with this === world\n\n     "
            }
          ],
          "internal": true,
          "related_to": "new Physics.world",
          "description": "Initialization",
          "short_description": "Initialization",
          "line": 85,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "init",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.init",
          "outFile": "world.html#Physics.world.prototype.init"
        },
        {
          "id": "Physics.world#integrator",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "integrator",
                  "optional": true,
                  "types": [
                    "Integrator"
                  ],
                  "description": " The integrator to set on the world\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Integrator",
                  "description": " The currently set integrator if `integrator` not specified\n\n     "
                },
                {
                  "type": "this",
                  "description": " for chaining if `integrator` specified\n\n     "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "integrator",
              "types": [
                "Integrator"
              ],
              "description": " The integrator to set on the world\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Integrator",
              "description": " The currently set integrator if `integrator` not specified\n\n     "
            },
            {
              "type": "this",
              "description": " for chaining if `integrator` specified\n\n     "
            }
          ],
          "chainable": true,
          "description": "Get or Set the integrator",
          "short_description": "Get or Set the integrator",
          "line": 290,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "integrator",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.integrator",
          "outFile": "world.html#Physics.world.prototype.integrator"
        },
        {
          "id": "Physics.world#isPaused",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [],
              "returns": [
                {
                  "type": "Boolean"
                }
              ]
            }
          ],
          "returns": [
            {
              "type": "Boolean",
              "description": " Returns `true` if world is paused, `false` otherwise.\n\n     "
            }
          ],
          "description": "Determine if world is paused.",
          "short_description": "Determine if world is paused.",
          "line": 661,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "isPaused",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.isPaused",
          "outFile": "world.html#Physics.world.prototype.isPaused"
        },
        {
          "id": "Physics.world#iterate",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "dt",
                  "types": [
                    "Number"
                  ],
                  "description": " The timestep\n\n     "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "dt",
              "types": [
                "Number"
              ],
              "description": " The timestep\n\n     "
            }
          ],
          "internal": true,
          "description": "Do a single iteration.",
          "short_description": "Do a single iteration.",
          "line": 562,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "iterate",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.iterate",
          "outFile": "world.html#Physics.world.prototype.iterate"
        },
        {
          "id": "Physics.world#options",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "cfg",
                  "types": [
                    "Object"
                  ],
                  "description": " configuration options (see constructor)\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Object",
                  "description": " Options container\n\n     "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "options",
              "types": [
                "Object"
              ],
              "description": " configuration options (see constructor)\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Object",
              "description": " Options container\n\n     "
            }
          ],
          "description": "Set config options. Also access options by `.options.<option>`.",
          "short_description": "Set config options. Also access options by `.options.<option>`.",
          "line": 135,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "options",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.options",
          "outFile": "world.html#Physics.world.prototype.options"
        },
        {
          "id": "Physics.world#pause",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "chainable": true,
          "description": "Pause the world (step calls do nothing).",
          "short_description": "Pause the world (step calls do nothing).",
          "line": 636,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "pause",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.pause",
          "outFile": "world.html#Physics.world.prototype.pause"
        },
        {
          "id": "Physics.world#remove",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "things",
                  "types": [
                    "Object",
                    "Array"
                  ],
                  "description": " The thing, or array of things (body, behavior, integrator, or renderer) to remove.\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "things",
              "types": [
                "Object",
                "Array"
              ],
              "description": " The thing, or array of things (body, behavior, integrator, or renderer) to remove.\n\n     "
            }
          ],
          "chainable": true,
          "description": "Multipurpose remove method. Remove one or many bodies, behaviors, integrators, renderers...",
          "short_description": "Multipurpose remove method. Remove one or many bodies, behaviors, integrators, renderers...",
          "line": 191,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "remove",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.remove",
          "outFile": "world.html#Physics.world.prototype.remove"
        },
        {
          "id": "Physics.world#removeBehavior",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "behavior",
                  "types": [
                    "Behavior"
                  ],
                  "description": " The behavior to remove\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "behavior",
              "types": [
                "Behavior"
              ],
              "description": " The behavior to remove\n\n     "
            }
          ],
          "chainable": true,
          "description": "Remove a behavior from the world",
          "short_description": "Remove a behavior from the world",
          "line": 427,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "removeBehavior",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.removeBehavior",
          "outFile": "world.html#Physics.world.prototype.removeBehavior"
        },
        {
          "id": "Physics.world#removeBody",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "body",
                  "types": [
                    "Body"
                  ],
                  "description": " The body to remove\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "body",
              "types": [
                "Body"
              ],
              "description": " The body to remove\n\n     "
            }
          ],
          "chainable": true,
          "description": "Remove a body from the world",
          "short_description": "Remove a body from the world",
          "line": 495,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "removeBody",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.removeBody",
          "outFile": "world.html#Physics.world.prototype.removeBody"
        },
        {
          "id": "Physics.world#render",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "chainable": true,
          "description": "Render current world state using the renderer",
          "short_description": "Render current world state using the renderer",
          "line": 616,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "render",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.render",
          "outFile": "world.html#Physics.world.prototype.render"
        },
        {
          "id": "Physics.world#renderer",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "renderer",
                  "optional": true,
                  "types": [
                    "Renderer"
                  ],
                  "description": " The renderer to set on the world\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Renderer",
                  "description": " The currently set renderer if `renderer` not specified\n\n     "
                },
                {
                  "type": "this",
                  "description": " for chaining if `renderer` specified\n\n     "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "renderer",
              "types": [
                "Renderer"
              ],
              "description": " The renderer to set on the world\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Renderer",
              "description": " The currently set renderer if `renderer` not specified\n\n     "
            },
            {
              "type": "this",
              "description": " for chaining if `renderer` specified\n\n     "
            }
          ],
          "chainable": true,
          "description": "Get or Set the renderer",
          "short_description": "Get or Set the renderer",
          "line": 330,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "renderer",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.renderer",
          "outFile": "world.html#Physics.world.prototype.renderer"
        },
        {
          "id": "Physics.world#step",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "now",
                  "types": [
                    "Number"
                  ],
                  "description": " now Current unix timestamp\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "now",
              "types": [
                "Number"
              ],
              "description": " now Current unix timestamp\n\n     "
            }
          ],
          "chainable": true,
          "description": "Do a single step.",
          "short_description": "Do a single step.",
          "line": 573,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "step",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.step",
          "outFile": "world.html#Physics.world.prototype.step"
        },
        {
          "id": "Physics.world#timeStep",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "dt",
                  "optional": true,
                  "types": [
                    "Number"
                  ],
                  "description": " The time step for the world\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Number",
                  "description": " The currently set time step if `dt` not specified\n\n     "
                },
                {
                  "type": "this",
                  "description": " for chaining if `dt` specified\n\n     "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "dt",
              "types": [
                "Number"
              ],
              "description": " The time step for the world\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Number",
              "description": " The currently set time step if `dt` not specified\n\n     "
            },
            {
              "type": "this",
              "description": " for chaining if `dt` specified\n\n     "
            }
          ],
          "chainable": true,
          "description": "Get or Set the time step",
          "short_description": "Get or Set the time step",
          "line": 370,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "timeStep",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.timeStep",
          "outFile": "world.html#Physics.world.prototype.timeStep"
        },
        {
          "id": "Physics.world#unpause",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "chainable": true,
          "description": "Unpause the world (step calls continue as usual).",
          "short_description": "Unpause the world (step calls continue as usual).",
          "line": 648,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "unpause",
          "name_prefix": "Physics.world#",
          "path": "Physics.world.prototype.unpause",
          "outFile": "world.html#Physics.world.prototype.unpause"
        },
        {
          "id": "new Physics.world",
          "type": "constructor",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "options",
                  "optional": true,
                  "types": [
                    "Object"
                  ],
                  "description": " configuration options\n\n   - options.timestep (Number = 1000.0/160): default timestep\n\n   ...\n\n "
                },
                {
                  "name": "fn",
                  "arguments": [
                    {
                      "name": "world"
                    },
                    {
                      "name": "Physics"
                    }
                  ],
                  "callback": true,
                  "optional": true,
                  "types": [
                    "Function",
                    "Array"
                  ],
                  "description": " Callback function or array of callbacks called with this === world\n\n "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "options",
              "types": [
                "Object"
              ],
              "description": " configuration options\n\n   - options.timestep (Number = 1000.0/160): default timestep\n\n   ...\n\n "
            },
            {
              "name": "fn",
              "types": [
                "Function",
                "Array"
              ],
              "description": " Callback function or array of callbacks called with this === world\n\n "
            }
          ],
          "alias_of": "Physics",
          "description": "World Constructor.\n\nIf called with an array of functions, and any functions\nreturn a promise-like object, the remaining callbacks will\nbe called only when that promise is resolved.",
          "short_description": "World Constructor.\n",
          "line": 65,
          "aliases": [],
          "children": [],
          "file": "src/core/world.js",
          "name": "new",
          "name_prefix": "Physics.world.",
          "path": "Physics.world.new",
          "outFile": "world.html#Physics.world.new"
        }
      ],
      "file": "src/core/world.js",
      "subclasses": [],
      "name": "world",
      "name_prefix": "Physics.",
      "path": "Physics.world",
      "outFile": "world.html"
    },
    "Physics.world.new": {
      "id": "new Physics.world",
      "type": "constructor",
      "signatures": [
        {
          "arguments": [
            {
              "name": "options",
              "optional": true,
              "types": [
                "Object"
              ],
              "description": " configuration options\n\n   - options.timestep (Number = 1000.0/160): default timestep\n\n   ...\n\n "
            },
            {
              "name": "fn",
              "arguments": [
                {
                  "name": "world"
                },
                {
                  "name": "Physics"
                }
              ],
              "callback": true,
              "optional": true,
              "types": [
                "Function",
                "Array"
              ],
              "description": " Callback function or array of callbacks called with this === world\n\n "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "options",
          "types": [
            "Object"
          ],
          "description": " configuration options\n\n   - options.timestep (Number = 1000.0/160): default timestep\n\n   ...\n\n "
        },
        {
          "name": "fn",
          "types": [
            "Function",
            "Array"
          ],
          "description": " Callback function or array of callbacks called with this === world\n\n "
        }
      ],
      "alias_of": "Physics",
      "description": "World Constructor.\n\nIf called with an array of functions, and any functions\nreturn a promise-like object, the remaining callbacks will\nbe called only when that promise is resolved.",
      "short_description": "World Constructor.\n",
      "line": 65,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "new",
      "name_prefix": "Physics.world.",
      "path": "Physics.world.new",
      "outFile": "world.html#Physics.world.new"
    },
    "Physics.world#init": {
      "id": "Physics.world#init",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "options",
              "optional": true,
              "types": [
                "Object"
              ],
              "description": " configuration options (see constructor)\n\n     "
            },
            {
              "name": "fn",
              "arguments": [
                {
                  "name": "world"
                },
                {
                  "name": "Physics"
                }
              ],
              "callback": true,
              "optional": true,
              "types": [
                "Function",
                "Array"
              ],
              "description": " Callback function or array of callbacks called with this === world\n\n     "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "options",
          "types": [
            "Object"
          ],
          "description": " configuration options (see constructor)\n\n     "
        },
        {
          "name": "fn",
          "types": [
            "Function",
            "Array"
          ],
          "description": " Callback function or array of callbacks called with this === world\n\n     "
        }
      ],
      "internal": true,
      "related_to": "new Physics.world",
      "description": "Initialization",
      "short_description": "Initialization",
      "line": 85,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "init",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.init",
      "outFile": "world.html#Physics.world.prototype.init"
    },
    "Physics.world#options": {
      "id": "Physics.world#options",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "cfg",
              "types": [
                "Object"
              ],
              "description": " configuration options (see constructor)\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Object",
              "description": " Options container\n\n     "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "options",
          "types": [
            "Object"
          ],
          "description": " configuration options (see constructor)\n\n     "
        }
      ],
      "returns": [
        {
          "type": "Object",
          "description": " Options container\n\n     "
        }
      ],
      "description": "Set config options. Also access options by `.options.<option>`.",
      "short_description": "Set config options. Also access options by `.options.<option>`.",
      "line": 135,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "options",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.options",
      "outFile": "world.html#Physics.world.prototype.options"
    },
    "Physics.world#add": {
      "id": "Physics.world#add",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "things",
              "types": [
                "Object",
                "Array"
              ],
              "description": " The thing, or array of things (body, behavior, integrator, or renderer) to add.\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "things",
          "types": [
            "Object",
            "Array"
          ],
          "description": " The thing, or array of things (body, behavior, integrator, or renderer) to add.\n\n     "
        }
      ],
      "chainable": true,
      "description": "Multipurpose add method. Add one or many bodies, behaviors, integrators, renderers...",
      "short_description": "Multipurpose add method. Add one or many bodies, behaviors, integrators, renderers...",
      "line": 143,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "add",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.add",
      "outFile": "world.html#Physics.world.prototype.add"
    },
    "Physics.world#remove": {
      "id": "Physics.world#remove",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "things",
              "types": [
                "Object",
                "Array"
              ],
              "description": " The thing, or array of things (body, behavior, integrator, or renderer) to remove.\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "things",
          "types": [
            "Object",
            "Array"
          ],
          "description": " The thing, or array of things (body, behavior, integrator, or renderer) to remove.\n\n     "
        }
      ],
      "chainable": true,
      "description": "Multipurpose remove method. Remove one or many bodies, behaviors, integrators, renderers...",
      "short_description": "Multipurpose remove method. Remove one or many bodies, behaviors, integrators, renderers...",
      "line": 191,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "remove",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.remove",
      "outFile": "world.html#Physics.world.prototype.remove"
    },
    "Physics.world#has": {
      "id": "Physics.world#has",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "thing",
              "types": [
                "Object"
              ],
              "description": " The thing to test\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Boolean",
              "description": " `true` if thing is in the world, `false` otherwise.\n\n     "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "thing",
          "types": [
            "Object"
          ],
          "description": " The thing to test\n\n     "
        }
      ],
      "returns": [
        {
          "type": "Boolean",
          "description": " `true` if thing is in the world, `false` otherwise.\n\n     "
        }
      ],
      "chainable": true,
      "description": "Determine if a thing has been added to world.",
      "short_description": "Determine if a thing has been added to world.",
      "line": 244,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "has",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.has",
      "outFile": "world.html#Physics.world.prototype.has"
    },
    "Physics.world#integrator": {
      "id": "Physics.world#integrator",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "integrator",
              "optional": true,
              "types": [
                "Integrator"
              ],
              "description": " The integrator to set on the world\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Integrator",
              "description": " The currently set integrator if `integrator` not specified\n\n     "
            },
            {
              "type": "this",
              "description": " for chaining if `integrator` specified\n\n     "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "integrator",
          "types": [
            "Integrator"
          ],
          "description": " The integrator to set on the world\n\n     "
        }
      ],
      "returns": [
        {
          "type": "Integrator",
          "description": " The currently set integrator if `integrator` not specified\n\n     "
        },
        {
          "type": "this",
          "description": " for chaining if `integrator` specified\n\n     "
        }
      ],
      "chainable": true,
      "description": "Get or Set the integrator",
      "short_description": "Get or Set the integrator",
      "line": 290,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "integrator",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.integrator",
      "outFile": "world.html#Physics.world.prototype.integrator"
    },
    "Physics.world#renderer": {
      "id": "Physics.world#renderer",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "renderer",
              "optional": true,
              "types": [
                "Renderer"
              ],
              "description": " The renderer to set on the world\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Renderer",
              "description": " The currently set renderer if `renderer` not specified\n\n     "
            },
            {
              "type": "this",
              "description": " for chaining if `renderer` specified\n\n     "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "renderer",
          "types": [
            "Renderer"
          ],
          "description": " The renderer to set on the world\n\n     "
        }
      ],
      "returns": [
        {
          "type": "Renderer",
          "description": " The currently set renderer if `renderer` not specified\n\n     "
        },
        {
          "type": "this",
          "description": " for chaining if `renderer` specified\n\n     "
        }
      ],
      "chainable": true,
      "description": "Get or Set the renderer",
      "short_description": "Get or Set the renderer",
      "line": 330,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "renderer",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.renderer",
      "outFile": "world.html#Physics.world.prototype.renderer"
    },
    "Physics.world#timeStep": {
      "id": "Physics.world#timeStep",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "dt",
              "optional": true,
              "types": [
                "Number"
              ],
              "description": " The time step for the world\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Number",
              "description": " The currently set time step if `dt` not specified\n\n     "
            },
            {
              "type": "this",
              "description": " for chaining if `dt` specified\n\n     "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "dt",
          "types": [
            "Number"
          ],
          "description": " The time step for the world\n\n     "
        }
      ],
      "returns": [
        {
          "type": "Number",
          "description": " The currently set time step if `dt` not specified\n\n     "
        },
        {
          "type": "this",
          "description": " for chaining if `dt` specified\n\n     "
        }
      ],
      "chainable": true,
      "description": "Get or Set the time step",
      "short_description": "Get or Set the time step",
      "line": 370,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "timeStep",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.timeStep",
      "outFile": "world.html#Physics.world.prototype.timeStep"
    },
    "Physics.world#addBehavior": {
      "id": "Physics.world#addBehavior",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "behavior",
              "types": [
                "Behavior"
              ],
              "description": " The behavior to add\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "behavior",
          "types": [
            "Behavior"
          ],
          "description": " The behavior to add\n\n     "
        }
      ],
      "chainable": true,
      "description": "Add a behavior to the world",
      "short_description": "Add a behavior to the world",
      "line": 390,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "addBehavior",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.addBehavior",
      "outFile": "world.html#Physics.world.prototype.addBehavior"
    },
    "Physics.world#getBehaviors": {
      "id": "Physics.world#getBehaviors",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [],
          "returns": [
            {
              "type": "Array"
            }
          ]
        }
      ],
      "returns": [
        {
          "type": "Array",
          "description": " Array of behaviors\n\n     "
        }
      ],
      "description": "Get copied list of behaviors in the world",
      "short_description": "Get copied list of behaviors in the world",
      "line": 415,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "getBehaviors",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.getBehaviors",
      "outFile": "world.html#Physics.world.prototype.getBehaviors"
    },
    "Physics.world#removeBehavior": {
      "id": "Physics.world#removeBehavior",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "behavior",
              "types": [
                "Behavior"
              ],
              "description": " The behavior to remove\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "behavior",
          "types": [
            "Behavior"
          ],
          "description": " The behavior to remove\n\n     "
        }
      ],
      "chainable": true,
      "description": "Remove a behavior from the world",
      "short_description": "Remove a behavior from the world",
      "line": 427,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "removeBehavior",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.removeBehavior",
      "outFile": "world.html#Physics.world.prototype.removeBehavior"
    },
    "Physics.world#addBody": {
      "id": "Physics.world#addBody",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "body",
              "types": [
                "Body"
              ],
              "description": " The behavior to add\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "body",
          "types": [
            "Body"
          ],
          "description": " The behavior to add\n\n     "
        }
      ],
      "chainable": true,
      "description": "Add a body to the world",
      "short_description": "Add a body to the world",
      "line": 458,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "addBody",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.addBody",
      "outFile": "world.html#Physics.world.prototype.addBody"
    },
    "Physics.world#getBodies": {
      "id": "Physics.world#getBodies",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [],
          "returns": [
            {
              "type": "Array"
            }
          ]
        }
      ],
      "returns": [
        {
          "type": "Array",
          "description": " Array of bodies\n\n     "
        }
      ],
      "description": "Get copied list of bodies in the world",
      "short_description": "Get copied list of bodies in the world",
      "line": 483,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "getBodies",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.getBodies",
      "outFile": "world.html#Physics.world.prototype.getBodies"
    },
    "Physics.world#removeBody": {
      "id": "Physics.world#removeBody",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "body",
              "types": [
                "Body"
              ],
              "description": " The body to remove\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "body",
          "types": [
            "Body"
          ],
          "description": " The body to remove\n\n     "
        }
      ],
      "chainable": true,
      "description": "Remove a body from the world",
      "short_description": "Remove a body from the world",
      "line": 495,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "removeBody",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.removeBody",
      "outFile": "world.html#Physics.world.prototype.removeBody"
    },
    "Physics.world#findOne": {
      "id": "Physics.world#findOne",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "rules",
              "types": [
                "Object"
              ],
              "description": " Query rules.\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Body"
            },
            {
              "type": false
            }
          ]
        },
        {
          "arguments": [
            {
              "name": "filter",
              "arguments": [
                {
                  "name": "body",
                  "description": " Each body in the world\n\n     ",
                  "types": [
                    "Body"
                  ]
                }
              ],
              "callback": true,
              "types": [
                "Function"
              ],
              "description": " Filter function called to check bodies\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Body"
            },
            {
              "type": false
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "rules",
          "types": [
            "Object"
          ],
          "description": " Query rules.\n\n     "
        },
        {
          "name": "filter",
          "types": [
            "Function"
          ],
          "description": " Filter function called to check bodies\n\n     "
        },
        {
          "name": "body",
          "types": [
            "Body"
          ],
          "description": " Each body in the world\n\n     "
        }
      ],
      "related_to": "Physics.query",
      "description": "Find first matching body based on query rules.",
      "short_description": "Find first matching body based on query rules.",
      "line": 529,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "findOne",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.findOne",
      "outFile": "world.html#Physics.world.prototype.findOne"
    },
    "Physics.world#find": {
      "id": "Physics.world#find",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "rules",
              "types": [
                "Object"
              ],
              "description": " Query rules\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Array"
            }
          ]
        },
        {
          "arguments": [
            {
              "name": "filter",
              "arguments": [
                {
                  "name": "body",
                  "description": " Each body in the world\n\n     ",
                  "types": [
                    "Body"
                  ]
                }
              ],
              "callback": true,
              "types": [
                "Function"
              ],
              "description": " Filter function called to check bodies\n\n     "
            }
          ],
          "returns": [
            {
              "type": "Array"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "rules",
          "types": [
            "Object"
          ],
          "description": " Query rules\n\n     "
        },
        {
          "name": "filter",
          "types": [
            "Function"
          ],
          "description": " Filter function called to check bodies\n\n     "
        },
        {
          "name": "body",
          "types": [
            "Body"
          ],
          "description": " Each body in the world\n\n     "
        }
      ],
      "related_to": "Physics.query",
      "description": "Find all matching bodies based on query rules.",
      "short_description": "Find all matching bodies based on query rules.",
      "line": 547,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "find",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.find",
      "outFile": "world.html#Physics.world.prototype.find"
    },
    "Physics.world#iterate": {
      "id": "Physics.world#iterate",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "dt",
              "types": [
                "Number"
              ],
              "description": " The timestep\n\n     "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "dt",
          "types": [
            "Number"
          ],
          "description": " The timestep\n\n     "
        }
      ],
      "internal": true,
      "description": "Do a single iteration.",
      "short_description": "Do a single iteration.",
      "line": 562,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "iterate",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.iterate",
      "outFile": "world.html#Physics.world.prototype.iterate"
    },
    "Physics.world#step": {
      "id": "Physics.world#step",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "now",
              "types": [
                "Number"
              ],
              "description": " now Current unix timestamp\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "now",
          "types": [
            "Number"
          ],
          "description": " now Current unix timestamp\n\n     "
        }
      ],
      "chainable": true,
      "description": "Do a single step.",
      "short_description": "Do a single step.",
      "line": 573,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "step",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.step",
      "outFile": "world.html#Physics.world.prototype.step"
    },
    "Physics.world#render": {
      "id": "Physics.world#render",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "chainable": true,
      "description": "Render current world state using the renderer",
      "short_description": "Render current world state using the renderer",
      "line": 616,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "render",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.render",
      "outFile": "world.html#Physics.world.prototype.render"
    },
    "Physics.world#pause": {
      "id": "Physics.world#pause",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "chainable": true,
      "description": "Pause the world (step calls do nothing).",
      "short_description": "Pause the world (step calls do nothing).",
      "line": 636,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "pause",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.pause",
      "outFile": "world.html#Physics.world.prototype.pause"
    },
    "Physics.world#unpause": {
      "id": "Physics.world#unpause",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "chainable": true,
      "description": "Unpause the world (step calls continue as usual).",
      "short_description": "Unpause the world (step calls continue as usual).",
      "line": 648,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "unpause",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.unpause",
      "outFile": "world.html#Physics.world.prototype.unpause"
    },
    "Physics.world#isPaused": {
      "id": "Physics.world#isPaused",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [],
          "returns": [
            {
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": [
        {
          "type": "Boolean",
          "description": " Returns `true` if world is paused, `false` otherwise.\n\n     "
        }
      ],
      "description": "Determine if world is paused.",
      "short_description": "Determine if world is paused.",
      "line": 661,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "isPaused",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.isPaused",
      "outFile": "world.html#Physics.world.prototype.isPaused"
    },
    "Physics.world#destroy": {
      "id": "Physics.world#destroy",
      "type": "instance method",
      "signatures": [
        {
          "arguments": []
        }
      ],
      "description": "Destroy the world.\n(Bwahahahahaha!)",
      "short_description": "Destroy the world.\n(Bwahahahahaha!)",
      "line": 672,
      "aliases": [],
      "children": [],
      "file": "src/core/world.js",
      "name": "destroy",
      "name_prefix": "Physics.world#",
      "path": "Physics.world.prototype.destroy",
      "outFile": "world.html#Physics.world.prototype.destroy"
    },
    "Physics": {
      "id": "Physics",
      "type": "namespace",
      "related_to": "Physics.world",
      "description": "The top-level namespace. All of PhysicsJS is contained in\nthe `Physics` namespace.\n\nIt may be invoked as a function to create a world instance.\n\nexample:\n\n```javascript\nPhysics( cfg, function( world ) {\n    // use world\n}); // returns world\n```",
      "short_description": "The top-level namespace. All of PhysicsJS is contained in\nthe `Physics` namespace.\n",
      "line": 35,
      "aliases": [
        "Physics.world.new"
      ],
      "children": [
        {
          "id": "Physics.behavior",
          "type": "class method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "name",
                  "types": [
                    "String"
                  ],
                  "description": " The name of the behavior to create\n\n "
                },
                {
                  "name": "options",
                  "optional": true,
                  "types": [
                    "Object"
                  ],
                  "description": " The configuration for that behavior ( depends on behavior )\n\n "
                }
              ],
              "returns": [
                {
                  "type": "Behavior"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "name",
              "types": [
                "String"
              ],
              "description": " The name of the behavior to create\n\n "
            },
            {
              "name": "options",
              "types": [
                "Object"
              ],
              "description": " The configuration for that behavior ( depends on behavior )\n\n "
            }
          ],
          "related_to": "Physics.util.decorator",
          "description": "Factory function for creating Behaviors.\n\nVisit [the PhysicsJS wiki on Behaviors](https://github.com/wellcaffeinated/PhysicsJS/wiki/Behaviors)\nfor usage documentation.",
          "short_description": "Factory function for creating Behaviors.\n",
          "line": 17,
          "aliases": [],
          "children": [],
          "file": "src/core/behavior.js",
          "name": "behavior",
          "name_prefix": "Physics.",
          "path": "Physics.behavior",
          "outFile": "behavior.html#Physics.behavior"
        },
        {
          "id": "Physics.noConflict",
          "type": "class method",
          "signatures": [
            {
              "arguments": [],
              "returns": [
                {
                  "type": "Physics"
                }
              ]
            }
          ],
          "description": "Restore the original reference to the global window.Physics variable.\n\nDoes nothing if PhysicsJS doesn't have a reference in global scope",
          "short_description": "Restore the original reference to the global window.Physics variable.\n",
          "line": 12,
          "aliases": [],
          "children": [],
          "file": "src/util/noconflict.js",
          "name": "noConflict",
          "name_prefix": "Physics.",
          "path": "Physics.noConflict",
          "outFile": "noconflict.html#Physics.noConflict"
        },
        {
          "id": "Physics.util",
          "type": "namespace",
          "description": "Namespace for utility functions. It contains a subset of\nthe [lodash API](http://lodash.com/docs).",
          "short_description": "Namespace for utility functions. It contains a subset of\nthe [lodash API](http://lodash.com/docs).",
          "line": 46,
          "aliases": [],
          "children": [
            {
              "id": "Physics.util.decorator",
              "type": "class method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "type",
                      "types": [
                        "String"
                      ],
                      "description": " The name of the factory you are creating\n\n "
                    },
                    {
                      "name": "protoDef",
                      "optional": true,
                      "types": [
                        "Object"
                      ],
                      "description": " The top-level prototype\n\n "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Function",
                      "description": " The factory function\n\n "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "type",
                  "types": [
                    "String"
                  ],
                  "description": " The name of the factory you are creating\n\n "
                },
                {
                  "name": "protoDef",
                  "types": [
                    "Object"
                  ],
                  "description": " The top-level prototype\n\n "
                }
              ],
              "returns": [
                {
                  "type": "Function",
                  "description": " The factory function\n\n "
                }
              ],
              "related_to": "factory",
              "description": "Facilitates creation of decorator factory functions.\n\nSee the [[factory]] definition for the factory signatures.\n[For full documentation and examples, please visit the wiki](https://github.com/wellcaffeinated/PhysicsJS/wiki/Fundamentals#the-factory-pattern).\n\nExample:\n\n```javascript\nvar factory = Physics.util.decorator('factory', {\n     // prototype methods...\n     method: function( args ){\n     }\n});\n\n// define\nfactory( 'name', 'parent-name', function( parent ){\n\n     // extend further...\n     return {\n         // overrides\n         init: function( cfg ){\n             parent.init.call(this, cfg);\n         }\n     };\n});\n\n// instantiate\nvar options = { key: 'val' };\nvar instance = factory( 'name', options );\n```",
              "short_description": "Facilitates creation of decorator factory functions.\n",
              "line": 38,
              "aliases": [],
              "children": [],
              "file": "src/util/decorator.js",
              "name": "decorator",
              "name_prefix": "Physics.util.",
              "path": "Physics.util.decorator",
              "outFile": "decorator.html#Physics.util.decorator"
            },
            {
              "id": "Physics.util.indexOf",
              "type": "class method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "arr",
                      "types": [
                        "Array"
                      ],
                      "description": " The array to search\n\n "
                    },
                    {
                      "name": "value",
                      "types": [
                        "Mixed"
                      ],
                      "description": " The value to find\n\n "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Number",
                      "description": " The index of `value` in the array OR `-1` if not found\n\n "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "arr",
                  "types": [
                    "Array"
                  ],
                  "description": " The array to search\n\n "
                },
                {
                  "name": "value",
                  "types": [
                    "Mixed"
                  ],
                  "description": " The value to find\n\n "
                }
              ],
              "returns": [
                {
                  "type": "Number",
                  "description": " The index of `value` in the array OR `-1` if not found\n\n "
                }
              ],
              "description": "Fast indexOf implementation.",
              "short_description": "Fast indexOf implementation.",
              "line": 9,
              "aliases": [],
              "children": [],
              "file": "src/util/helpers.js",
              "name": "indexOf",
              "name_prefix": "Physics.util.",
              "path": "Physics.util.indexOf",
              "outFile": "helpers.html#Physics.util.indexOf"
            },
            {
              "id": "Physics.util.options",
              "type": "class method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "def",
                      "types": [
                        "Object"
                      ],
                      "description": " Default options to set\n\n "
                    },
                    {
                      "name": "target",
                      "optional": true,
                      "types": [
                        "Object"
                      ],
                      "description": " Where to copy the options to. Defaults to the returned function.\n\n "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Function",
                      "description": " The options function\n\n "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "def",
                  "types": [
                    "Object"
                  ],
                  "description": " Default options to set\n\n "
                },
                {
                  "name": "target",
                  "types": [
                    "Object"
                  ],
                  "description": " Where to copy the options to. Defaults to the returned function.\n\n "
                }
              ],
              "returns": [
                {
                  "type": "Function",
                  "description": " The options function\n\n "
                }
              ],
              "description": "Options helper to keep track of options. Call it with a config object. Access options directly on the function.\n\nExample:\n\n```javascript\nthis.options = Physics.util.options({ foo: 'bar', opt: 'def' });\nthis.options({ opt: 'myVal' });\n\nthis.options.foo; // === 'bar'\nthis.options.def; // === 'myVal'\n\n// can also change defaults later\nthis.options.defaults({ foo: 'baz' });\n\n// can add a change callback\nthis.options.onChange(function( opts ){\n    // some option changed\n    // opts is the target\n});\n```",
              "short_description": "Options helper to keep track of options. Call it with a config object. Access options directly on the function.\n",
              "line": 51,
              "aliases": [],
              "children": [],
              "file": "src/util/helpers.js",
              "name": "options",
              "name_prefix": "Physics.util.",
              "path": "Physics.util.options",
              "outFile": "helpers.html#Physics.util.options"
            },
            {
              "id": "Physics.util.pubsub",
              "type": "class",
              "description": "Fast pubsub implementation.\n\nCan be mixed into other classes easily.",
              "short_description": "Fast pubsub implementation.\n",
              "line": 10,
              "aliases": [],
              "children": [
                {
                  "id": "Physics.util.pubsub#emit",
                  "type": "instance method",
                  "signatures": [
                    {
                      "arguments": [
                        {
                          "name": "topic",
                          "types": [
                            "String"
                          ],
                          "description": " The topic name\n\n     "
                        },
                        {
                          "name": "data",
                          "optional": true,
                          "types": [
                            "Mixed"
                          ],
                          "description": " The data to send\n\n     "
                        }
                      ],
                      "returns": [
                        {
                          "type": "this"
                        }
                      ]
                    }
                  ],
                  "arguments": [
                    {
                      "name": "topic",
                      "types": [
                        "String"
                      ],
                      "description": " The topic name\n\n     "
                    },
                    {
                      "name": "data",
                      "types": [
                        "Mixed"
                      ],
                      "description": " The data to send\n\n     "
                    }
                  ],
                  "description": "Publish data to a topic.",
                  "short_description": "Publish data to a topic.",
                  "line": 146,
                  "aliases": [],
                  "children": [],
                  "file": "src/util/pubsub.js",
                  "name": "emit",
                  "name_prefix": "Physics.util.pubsub#",
                  "path": "Physics.util.pubsub.prototype.emit",
                  "outFile": "pubsub.html#Physics.util.pubsub.prototype.emit"
                },
                {
                  "id": "Physics.util.pubsub#off",
                  "type": "instance method",
                  "signatures": [
                    {
                      "arguments": [
                        {
                          "name": "topic",
                          "types": [
                            "String"
                          ],
                          "description": " topic The topic name. Specify `true` to remove all listeners for all topics\n\n     "
                        },
                        {
                          "name": "fn",
                          "types": [
                            "Function"
                          ],
                          "description": " fn The original callback function. Specify `true` to remove all listeners for specified topic\n\n     "
                        }
                      ],
                      "returns": [
                        {
                          "type": "this"
                        }
                      ]
                    },
                    {
                      "arguments": [
                        {
                          "name": "topicCfg",
                          "types": [
                            "Object"
                          ],
                          "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                        }
                      ],
                      "returns": [
                        {
                          "type": "this"
                        }
                      ]
                    }
                  ],
                  "arguments": [
                    {
                      "name": "topic",
                      "types": [
                        "String"
                      ],
                      "description": " topic The topic name. Specify `true` to remove all listeners for all topics\n\n     "
                    },
                    {
                      "name": "topicCfg",
                      "types": [
                        "Object"
                      ],
                      "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                    },
                    {
                      "name": "fn",
                      "types": [
                        "Function"
                      ],
                      "description": " fn The original callback function. Specify `true` to remove all listeners for specified topic\n\n     "
                    }
                  ],
                  "description": "Unsubscribe callback(s) from topic(s).",
                  "short_description": "Unsubscribe callback(s) from topic(s).",
                  "line": 85,
                  "aliases": [],
                  "children": [],
                  "file": "src/util/pubsub.js",
                  "name": "off",
                  "name_prefix": "Physics.util.pubsub#",
                  "path": "Physics.util.pubsub.prototype.off",
                  "outFile": "pubsub.html#Physics.util.pubsub.prototype.off"
                },
                {
                  "id": "Physics.util.pubsub#on",
                  "type": "instance method",
                  "signatures": [
                    {
                      "arguments": [
                        {
                          "name": "topic",
                          "types": [
                            "String"
                          ],
                          "description": " The topic name\n\n     "
                        },
                        {
                          "name": "fn",
                          "arguments": [
                            {
                              "name": "data"
                            },
                            {
                              "name": "event"
                            }
                          ],
                          "callback": true,
                          "types": [
                            "Function"
                          ],
                          "description": " The callback function (if not using Object as previous argument)\n\n     "
                        },
                        {
                          "name": "scope",
                          "optional": true,
                          "types": [
                            "Object"
                          ],
                          "description": " The scope to bind callback to\n\n     "
                        },
                        {
                          "name": "priority",
                          "optional": true,
                          "types": [
                            "Number"
                          ],
                          "description": " The priority of the callback (higher is earlier)\n\n     "
                        }
                      ],
                      "returns": [
                        {
                          "type": "this"
                        }
                      ]
                    },
                    {
                      "arguments": [
                        {
                          "name": "topicConfig",
                          "types": [
                            "Object"
                          ],
                          "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                        },
                        {
                          "name": "scope",
                          "optional": true,
                          "types": [
                            "Object"
                          ],
                          "description": " The scope to bind callback to\n\n     "
                        },
                        {
                          "name": "priority",
                          "optional": true,
                          "types": [
                            "Number"
                          ],
                          "description": " The priority of the callback (higher is earlier)\n\n     "
                        }
                      ],
                      "returns": [
                        {
                          "type": "this"
                        }
                      ]
                    }
                  ],
                  "arguments": [
                    {
                      "name": "topic",
                      "types": [
                        "String"
                      ],
                      "description": " The topic name\n\n     "
                    },
                    {
                      "name": "topicConfig",
                      "types": [
                        "Object"
                      ],
                      "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                    },
                    {
                      "name": "fn",
                      "types": [
                        "Function"
                      ],
                      "description": " The callback function (if not using Object as previous argument)\n\n     "
                    },
                    {
                      "name": "data",
                      "types": [
                        "Mixed"
                      ],
                      "description": " The data sent from the call to `.emit()`\n\n     "
                    },
                    {
                      "name": "event",
                      "types": [
                        "Object"
                      ],
                      "description": " Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n\n     "
                    },
                    {
                      "name": "scope",
                      "types": [
                        "Object"
                      ],
                      "description": " The scope to bind callback to\n\n     "
                    },
                    {
                      "name": "priority",
                      "types": [
                        "Number"
                      ],
                      "description": " The priority of the callback (higher is earlier)\n\n     "
                    }
                  ],
                  "description": "Subscribe callback(s) to a topic(s).",
                  "short_description": "Subscribe callback(s) to a topic(s).",
                  "line": 32,
                  "aliases": [],
                  "children": [],
                  "file": "src/util/pubsub.js",
                  "name": "on",
                  "name_prefix": "Physics.util.pubsub#",
                  "path": "Physics.util.pubsub.prototype.on",
                  "outFile": "pubsub.html#Physics.util.pubsub.prototype.on"
                },
                {
                  "id": "Physics.util.pubsub#one",
                  "type": "instance method",
                  "signatures": [
                    {
                      "arguments": [
                        {
                          "name": "topic",
                          "types": [
                            "String"
                          ],
                          "description": " The topic name\n\n     "
                        },
                        {
                          "name": "fn",
                          "arguments": [
                            {
                              "name": "data"
                            },
                            {
                              "name": "event"
                            }
                          ],
                          "callback": true,
                          "types": [
                            "Function"
                          ],
                          "description": " The callback function (if not using Object as previous argument)\n\n     "
                        },
                        {
                          "name": "scope",
                          "optional": true,
                          "types": [
                            "Object"
                          ],
                          "description": " The scope to bind callback to\n\n     "
                        },
                        {
                          "name": "priority",
                          "optional": true,
                          "types": [
                            "Number"
                          ],
                          "description": " The priority of the callback (higher is earlier)\n\n     "
                        }
                      ],
                      "returns": [
                        {
                          "type": "this"
                        }
                      ]
                    },
                    {
                      "arguments": [
                        {
                          "name": "topicConfig",
                          "types": [
                            "Object"
                          ],
                          "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                        },
                        {
                          "name": "scope",
                          "optional": true,
                          "types": [
                            "Object"
                          ],
                          "description": " The scope to bind callback to\n\n     "
                        },
                        {
                          "name": "priority",
                          "optional": true,
                          "types": [
                            "Number"
                          ],
                          "description": " The priority of the callback (higher is earlier)\n\n     "
                        }
                      ],
                      "returns": [
                        {
                          "type": "this"
                        }
                      ]
                    }
                  ],
                  "arguments": [
                    {
                      "name": "topic",
                      "types": [
                        "String"
                      ],
                      "description": " The topic name\n\n     "
                    },
                    {
                      "name": "topicConfig",
                      "types": [
                        "Object"
                      ],
                      "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                    },
                    {
                      "name": "fn",
                      "types": [
                        "Function"
                      ],
                      "description": " The callback function (if not using Object as previous argument)\n\n     "
                    },
                    {
                      "name": "data",
                      "types": [
                        "Mixed"
                      ],
                      "description": " The data sent from the call to `.emit()`\n\n     "
                    },
                    {
                      "name": "event",
                      "types": [
                        "Object"
                      ],
                      "description": " Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n\n     "
                    },
                    {
                      "name": "scope",
                      "types": [
                        "Object"
                      ],
                      "description": " The scope to bind callback to\n\n     "
                    },
                    {
                      "name": "priority",
                      "types": [
                        "Number"
                      ],
                      "description": " The priority of the callback (higher is earlier)\n\n     "
                    }
                  ],
                  "description": "Subscribe callback(s) to a topic(s), but only ONCE.",
                  "short_description": "Subscribe callback(s) to a topic(s), but only ONCE.",
                  "line": 197,
                  "aliases": [],
                  "children": [],
                  "file": "src/util/pubsub.js",
                  "name": "one",
                  "name_prefix": "Physics.util.pubsub#",
                  "path": "Physics.util.pubsub.prototype.one",
                  "outFile": "pubsub.html#Physics.util.pubsub.prototype.one"
                }
              ],
              "file": "src/util/pubsub.js",
              "subclasses": [],
              "name": "pubsub",
              "name_prefix": "Physics.util.",
              "path": "Physics.util.pubsub",
              "outFile": "pubsub.html"
            },
            {
              "id": "Physics.util.ticker",
              "type": "class",
              "description": "The Ticker _singleton_ for easily binding callbacks to animation loops (requestAnimationFrame).\n\nRequires window.requestAnimationFrame... so polyfill it if you need to.",
              "short_description": "The Ticker _singleton_ for easily binding callbacks to animation loops (requestAnimationFrame).\n",
              "line": 8,
              "aliases": [],
              "children": [
                {
                  "id": "Physics.util.ticker.isActive",
                  "type": "class method",
                  "signatures": [
                    {
                      "arguments": [],
                      "returns": [
                        {
                          "type": "Boolean"
                        }
                      ]
                    }
                  ],
                  "returns": [
                    {
                      "type": "Boolean",
                      "description": " `true` if running, `false` otherwise.\n\n "
                    }
                  ],
                  "description": "Determine if ticker is currently running.",
                  "short_description": "Determine if ticker is currently running.",
                  "line": 92,
                  "aliases": [],
                  "children": [],
                  "file": "src/util/ticker.js",
                  "name": "isActive",
                  "name_prefix": "Physics.util.ticker.",
                  "path": "Physics.util.ticker.isActive",
                  "outFile": "ticker.html#Physics.util.ticker.isActive"
                },
                {
                  "id": "Physics.util.ticker.off",
                  "type": "class method",
                  "signatures": [
                    {
                      "arguments": [
                        {
                          "name": "listener",
                          "types": [
                            "Function"
                          ],
                          "description": " The callback function previously bound\n\n "
                        }
                      ],
                      "returns": [
                        {
                          "type": "this"
                        }
                      ]
                    }
                  ],
                  "arguments": [
                    {
                      "name": "listener",
                      "types": [
                        "Function"
                      ],
                      "description": " The callback function previously bound\n\n "
                    }
                  ],
                  "description": "Unsubscribe a callback from the ticker.",
                  "short_description": "Unsubscribe a callback from the ticker.",
                  "line": 80,
                  "aliases": [],
                  "children": [],
                  "file": "src/util/ticker.js",
                  "name": "off",
                  "name_prefix": "Physics.util.ticker.",
                  "path": "Physics.util.ticker.off",
                  "outFile": "ticker.html#Physics.util.ticker.off"
                },
                {
                  "id": "Physics.util.ticker.on",
                  "type": "class method",
                  "signatures": [
                    {
                      "arguments": [
                        {
                          "name": "listener",
                          "arguments": [
                            {
                              "name": "time",
                              "description": " The current timestamp\n\n ",
                              "types": [
                                "Number"
                              ]
                            }
                          ],
                          "callback": true,
                          "types": [
                            "Function"
                          ],
                          "description": " The callback function\n\n "
                        }
                      ],
                      "returns": [
                        {
                          "type": "this"
                        }
                      ]
                    }
                  ],
                  "arguments": [
                    {
                      "name": "listener",
                      "types": [
                        "Function"
                      ],
                      "description": " The callback function\n\n "
                    },
                    {
                      "name": "time",
                      "types": [
                        "Number"
                      ],
                      "description": " The current timestamp\n\n "
                    }
                  ],
                  "description": "Subscribe a callback to the ticker.",
                  "short_description": "Subscribe a callback to the ticker.",
                  "line": 68,
                  "aliases": [],
                  "children": [],
                  "file": "src/util/ticker.js",
                  "name": "on",
                  "name_prefix": "Physics.util.ticker.",
                  "path": "Physics.util.ticker.on",
                  "outFile": "ticker.html#Physics.util.ticker.on"
                },
                {
                  "id": "Physics.util.ticker.start",
                  "type": "class method",
                  "signatures": [
                    {
                      "arguments": [],
                      "returns": [
                        {
                          "type": "this"
                        }
                      ]
                    }
                  ],
                  "description": "Start the ticker",
                  "short_description": "Start the ticker",
                  "line": 43,
                  "aliases": [],
                  "children": [],
                  "file": "src/util/ticker.js",
                  "name": "start",
                  "name_prefix": "Physics.util.ticker.",
                  "path": "Physics.util.ticker.start",
                  "outFile": "ticker.html#Physics.util.ticker.start"
                },
                {
                  "id": "Physics.util.ticker.stop",
                  "type": "class method",
                  "signatures": [
                    {
                      "arguments": [],
                      "returns": [
                        {
                          "type": "this"
                        }
                      ]
                    }
                  ],
                  "description": "Stop the ticker",
                  "short_description": "Stop the ticker",
                  "line": 55,
                  "aliases": [],
                  "children": [],
                  "file": "src/util/ticker.js",
                  "name": "stop",
                  "name_prefix": "Physics.util.ticker.",
                  "path": "Physics.util.ticker.stop",
                  "outFile": "ticker.html#Physics.util.ticker.stop"
                }
              ],
              "file": "src/util/ticker.js",
              "subclasses": [],
              "name": "ticker",
              "name_prefix": "Physics.util.",
              "path": "Physics.util.ticker",
              "outFile": "ticker.html"
            }
          ],
          "file": "src/intro.js",
          "name": "util",
          "name_prefix": "Physics.",
          "path": "Physics.util",
          "outFile": "intro.html#Physics.util"
        },
        {
          "id": "Physics.world",
          "type": "class",
          "related_to": "new Physics.world",
          "description": "The world class and factory function.\n\nHere is a test link [[ new Physics.world ]]\n\nExample:\n\n```javascript\nPhysics( cfg, function( world ) {\n    // use world\n\n}); // returns world\n```",
          "short_description": "The world class and factory function.\n",
          "line": 17,
          "aliases": [],
          "children": [
            {
              "id": "Physics.world#add",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "things",
                      "types": [
                        "Object",
                        "Array"
                      ],
                      "description": " The thing, or array of things (body, behavior, integrator, or renderer) to add.\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "things",
                  "types": [
                    "Object",
                    "Array"
                  ],
                  "description": " The thing, or array of things (body, behavior, integrator, or renderer) to add.\n\n     "
                }
              ],
              "chainable": true,
              "description": "Multipurpose add method. Add one or many bodies, behaviors, integrators, renderers...",
              "short_description": "Multipurpose add method. Add one or many bodies, behaviors, integrators, renderers...",
              "line": 143,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "add",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.add",
              "outFile": "world.html#Physics.world.prototype.add"
            },
            {
              "id": "Physics.world#addBehavior",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "behavior",
                      "types": [
                        "Behavior"
                      ],
                      "description": " The behavior to add\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "behavior",
                  "types": [
                    "Behavior"
                  ],
                  "description": " The behavior to add\n\n     "
                }
              ],
              "chainable": true,
              "description": "Add a behavior to the world",
              "short_description": "Add a behavior to the world",
              "line": 390,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "addBehavior",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.addBehavior",
              "outFile": "world.html#Physics.world.prototype.addBehavior"
            },
            {
              "id": "Physics.world#addBody",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "body",
                      "types": [
                        "Body"
                      ],
                      "description": " The behavior to add\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "body",
                  "types": [
                    "Body"
                  ],
                  "description": " The behavior to add\n\n     "
                }
              ],
              "chainable": true,
              "description": "Add a body to the world",
              "short_description": "Add a body to the world",
              "line": 458,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "addBody",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.addBody",
              "outFile": "world.html#Physics.world.prototype.addBody"
            },
            {
              "id": "Physics.world#destroy",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": []
                }
              ],
              "description": "Destroy the world.\n(Bwahahahahaha!)",
              "short_description": "Destroy the world.\n(Bwahahahahaha!)",
              "line": 672,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "destroy",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.destroy",
              "outFile": "world.html#Physics.world.prototype.destroy"
            },
            {
              "id": "Physics.world#find",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "rules",
                      "types": [
                        "Object"
                      ],
                      "description": " Query rules\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Array"
                    }
                  ]
                },
                {
                  "arguments": [
                    {
                      "name": "filter",
                      "arguments": [
                        {
                          "name": "body",
                          "description": " Each body in the world\n\n     ",
                          "types": [
                            "Body"
                          ]
                        }
                      ],
                      "callback": true,
                      "types": [
                        "Function"
                      ],
                      "description": " Filter function called to check bodies\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Array"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "rules",
                  "types": [
                    "Object"
                  ],
                  "description": " Query rules\n\n     "
                },
                {
                  "name": "filter",
                  "types": [
                    "Function"
                  ],
                  "description": " Filter function called to check bodies\n\n     "
                },
                {
                  "name": "body",
                  "types": [
                    "Body"
                  ],
                  "description": " Each body in the world\n\n     "
                }
              ],
              "related_to": "Physics.query",
              "description": "Find all matching bodies based on query rules.",
              "short_description": "Find all matching bodies based on query rules.",
              "line": 547,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "find",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.find",
              "outFile": "world.html#Physics.world.prototype.find"
            },
            {
              "id": "Physics.world#findOne",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "rules",
                      "types": [
                        "Object"
                      ],
                      "description": " Query rules.\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Body"
                    },
                    {
                      "type": false
                    }
                  ]
                },
                {
                  "arguments": [
                    {
                      "name": "filter",
                      "arguments": [
                        {
                          "name": "body",
                          "description": " Each body in the world\n\n     ",
                          "types": [
                            "Body"
                          ]
                        }
                      ],
                      "callback": true,
                      "types": [
                        "Function"
                      ],
                      "description": " Filter function called to check bodies\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Body"
                    },
                    {
                      "type": false
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "rules",
                  "types": [
                    "Object"
                  ],
                  "description": " Query rules.\n\n     "
                },
                {
                  "name": "filter",
                  "types": [
                    "Function"
                  ],
                  "description": " Filter function called to check bodies\n\n     "
                },
                {
                  "name": "body",
                  "types": [
                    "Body"
                  ],
                  "description": " Each body in the world\n\n     "
                }
              ],
              "related_to": "Physics.query",
              "description": "Find first matching body based on query rules.",
              "short_description": "Find first matching body based on query rules.",
              "line": 529,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "findOne",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.findOne",
              "outFile": "world.html#Physics.world.prototype.findOne"
            },
            {
              "id": "Physics.world#getBehaviors",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [],
                  "returns": [
                    {
                      "type": "Array"
                    }
                  ]
                }
              ],
              "returns": [
                {
                  "type": "Array",
                  "description": " Array of behaviors\n\n     "
                }
              ],
              "description": "Get copied list of behaviors in the world",
              "short_description": "Get copied list of behaviors in the world",
              "line": 415,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "getBehaviors",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.getBehaviors",
              "outFile": "world.html#Physics.world.prototype.getBehaviors"
            },
            {
              "id": "Physics.world#getBodies",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [],
                  "returns": [
                    {
                      "type": "Array"
                    }
                  ]
                }
              ],
              "returns": [
                {
                  "type": "Array",
                  "description": " Array of bodies\n\n     "
                }
              ],
              "description": "Get copied list of bodies in the world",
              "short_description": "Get copied list of bodies in the world",
              "line": 483,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "getBodies",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.getBodies",
              "outFile": "world.html#Physics.world.prototype.getBodies"
            },
            {
              "id": "Physics.world#has",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "thing",
                      "types": [
                        "Object"
                      ],
                      "description": " The thing to test\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Boolean",
                      "description": " `true` if thing is in the world, `false` otherwise.\n\n     "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "thing",
                  "types": [
                    "Object"
                  ],
                  "description": " The thing to test\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Boolean",
                  "description": " `true` if thing is in the world, `false` otherwise.\n\n     "
                }
              ],
              "chainable": true,
              "description": "Determine if a thing has been added to world.",
              "short_description": "Determine if a thing has been added to world.",
              "line": 244,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "has",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.has",
              "outFile": "world.html#Physics.world.prototype.has"
            },
            {
              "id": "Physics.world#init",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "options",
                      "optional": true,
                      "types": [
                        "Object"
                      ],
                      "description": " configuration options (see constructor)\n\n     "
                    },
                    {
                      "name": "fn",
                      "arguments": [
                        {
                          "name": "world"
                        },
                        {
                          "name": "Physics"
                        }
                      ],
                      "callback": true,
                      "optional": true,
                      "types": [
                        "Function",
                        "Array"
                      ],
                      "description": " Callback function or array of callbacks called with this === world\n\n     "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "options",
                  "types": [
                    "Object"
                  ],
                  "description": " configuration options (see constructor)\n\n     "
                },
                {
                  "name": "fn",
                  "types": [
                    "Function",
                    "Array"
                  ],
                  "description": " Callback function or array of callbacks called with this === world\n\n     "
                }
              ],
              "internal": true,
              "related_to": "new Physics.world",
              "description": "Initialization",
              "short_description": "Initialization",
              "line": 85,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "init",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.init",
              "outFile": "world.html#Physics.world.prototype.init"
            },
            {
              "id": "Physics.world#integrator",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "integrator",
                      "optional": true,
                      "types": [
                        "Integrator"
                      ],
                      "description": " The integrator to set on the world\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Integrator",
                      "description": " The currently set integrator if `integrator` not specified\n\n     "
                    },
                    {
                      "type": "this",
                      "description": " for chaining if `integrator` specified\n\n     "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "integrator",
                  "types": [
                    "Integrator"
                  ],
                  "description": " The integrator to set on the world\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Integrator",
                  "description": " The currently set integrator if `integrator` not specified\n\n     "
                },
                {
                  "type": "this",
                  "description": " for chaining if `integrator` specified\n\n     "
                }
              ],
              "chainable": true,
              "description": "Get or Set the integrator",
              "short_description": "Get or Set the integrator",
              "line": 290,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "integrator",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.integrator",
              "outFile": "world.html#Physics.world.prototype.integrator"
            },
            {
              "id": "Physics.world#isPaused",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [],
                  "returns": [
                    {
                      "type": "Boolean"
                    }
                  ]
                }
              ],
              "returns": [
                {
                  "type": "Boolean",
                  "description": " Returns `true` if world is paused, `false` otherwise.\n\n     "
                }
              ],
              "description": "Determine if world is paused.",
              "short_description": "Determine if world is paused.",
              "line": 661,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "isPaused",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.isPaused",
              "outFile": "world.html#Physics.world.prototype.isPaused"
            },
            {
              "id": "Physics.world#iterate",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "dt",
                      "types": [
                        "Number"
                      ],
                      "description": " The timestep\n\n     "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "dt",
                  "types": [
                    "Number"
                  ],
                  "description": " The timestep\n\n     "
                }
              ],
              "internal": true,
              "description": "Do a single iteration.",
              "short_description": "Do a single iteration.",
              "line": 562,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "iterate",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.iterate",
              "outFile": "world.html#Physics.world.prototype.iterate"
            },
            {
              "id": "Physics.world#options",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "cfg",
                      "types": [
                        "Object"
                      ],
                      "description": " configuration options (see constructor)\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Object",
                      "description": " Options container\n\n     "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "options",
                  "types": [
                    "Object"
                  ],
                  "description": " configuration options (see constructor)\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Object",
                  "description": " Options container\n\n     "
                }
              ],
              "description": "Set config options. Also access options by `.options.<option>`.",
              "short_description": "Set config options. Also access options by `.options.<option>`.",
              "line": 135,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "options",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.options",
              "outFile": "world.html#Physics.world.prototype.options"
            },
            {
              "id": "Physics.world#pause",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "chainable": true,
              "description": "Pause the world (step calls do nothing).",
              "short_description": "Pause the world (step calls do nothing).",
              "line": 636,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "pause",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.pause",
              "outFile": "world.html#Physics.world.prototype.pause"
            },
            {
              "id": "Physics.world#remove",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "things",
                      "types": [
                        "Object",
                        "Array"
                      ],
                      "description": " The thing, or array of things (body, behavior, integrator, or renderer) to remove.\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "things",
                  "types": [
                    "Object",
                    "Array"
                  ],
                  "description": " The thing, or array of things (body, behavior, integrator, or renderer) to remove.\n\n     "
                }
              ],
              "chainable": true,
              "description": "Multipurpose remove method. Remove one or many bodies, behaviors, integrators, renderers...",
              "short_description": "Multipurpose remove method. Remove one or many bodies, behaviors, integrators, renderers...",
              "line": 191,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "remove",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.remove",
              "outFile": "world.html#Physics.world.prototype.remove"
            },
            {
              "id": "Physics.world#removeBehavior",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "behavior",
                      "types": [
                        "Behavior"
                      ],
                      "description": " The behavior to remove\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "behavior",
                  "types": [
                    "Behavior"
                  ],
                  "description": " The behavior to remove\n\n     "
                }
              ],
              "chainable": true,
              "description": "Remove a behavior from the world",
              "short_description": "Remove a behavior from the world",
              "line": 427,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "removeBehavior",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.removeBehavior",
              "outFile": "world.html#Physics.world.prototype.removeBehavior"
            },
            {
              "id": "Physics.world#removeBody",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "body",
                      "types": [
                        "Body"
                      ],
                      "description": " The body to remove\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "body",
                  "types": [
                    "Body"
                  ],
                  "description": " The body to remove\n\n     "
                }
              ],
              "chainable": true,
              "description": "Remove a body from the world",
              "short_description": "Remove a body from the world",
              "line": 495,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "removeBody",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.removeBody",
              "outFile": "world.html#Physics.world.prototype.removeBody"
            },
            {
              "id": "Physics.world#render",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "chainable": true,
              "description": "Render current world state using the renderer",
              "short_description": "Render current world state using the renderer",
              "line": 616,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "render",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.render",
              "outFile": "world.html#Physics.world.prototype.render"
            },
            {
              "id": "Physics.world#renderer",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "renderer",
                      "optional": true,
                      "types": [
                        "Renderer"
                      ],
                      "description": " The renderer to set on the world\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Renderer",
                      "description": " The currently set renderer if `renderer` not specified\n\n     "
                    },
                    {
                      "type": "this",
                      "description": " for chaining if `renderer` specified\n\n     "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "renderer",
                  "types": [
                    "Renderer"
                  ],
                  "description": " The renderer to set on the world\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Renderer",
                  "description": " The currently set renderer if `renderer` not specified\n\n     "
                },
                {
                  "type": "this",
                  "description": " for chaining if `renderer` specified\n\n     "
                }
              ],
              "chainable": true,
              "description": "Get or Set the renderer",
              "short_description": "Get or Set the renderer",
              "line": 330,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "renderer",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.renderer",
              "outFile": "world.html#Physics.world.prototype.renderer"
            },
            {
              "id": "Physics.world#step",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "now",
                      "types": [
                        "Number"
                      ],
                      "description": " now Current unix timestamp\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "now",
                  "types": [
                    "Number"
                  ],
                  "description": " now Current unix timestamp\n\n     "
                }
              ],
              "chainable": true,
              "description": "Do a single step.",
              "short_description": "Do a single step.",
              "line": 573,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "step",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.step",
              "outFile": "world.html#Physics.world.prototype.step"
            },
            {
              "id": "Physics.world#timeStep",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "dt",
                      "optional": true,
                      "types": [
                        "Number"
                      ],
                      "description": " The time step for the world\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "Number",
                      "description": " The currently set time step if `dt` not specified\n\n     "
                    },
                    {
                      "type": "this",
                      "description": " for chaining if `dt` specified\n\n     "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "dt",
                  "types": [
                    "Number"
                  ],
                  "description": " The time step for the world\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "Number",
                  "description": " The currently set time step if `dt` not specified\n\n     "
                },
                {
                  "type": "this",
                  "description": " for chaining if `dt` specified\n\n     "
                }
              ],
              "chainable": true,
              "description": "Get or Set the time step",
              "short_description": "Get or Set the time step",
              "line": 370,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "timeStep",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.timeStep",
              "outFile": "world.html#Physics.world.prototype.timeStep"
            },
            {
              "id": "Physics.world#unpause",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "chainable": true,
              "description": "Unpause the world (step calls continue as usual).",
              "short_description": "Unpause the world (step calls continue as usual).",
              "line": 648,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "unpause",
              "name_prefix": "Physics.world#",
              "path": "Physics.world.prototype.unpause",
              "outFile": "world.html#Physics.world.prototype.unpause"
            },
            {
              "id": "new Physics.world",
              "type": "constructor",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "options",
                      "optional": true,
                      "types": [
                        "Object"
                      ],
                      "description": " configuration options\n\n   - options.timestep (Number = 1000.0/160): default timestep\n\n   ...\n\n "
                    },
                    {
                      "name": "fn",
                      "arguments": [
                        {
                          "name": "world"
                        },
                        {
                          "name": "Physics"
                        }
                      ],
                      "callback": true,
                      "optional": true,
                      "types": [
                        "Function",
                        "Array"
                      ],
                      "description": " Callback function or array of callbacks called with this === world\n\n "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "options",
                  "types": [
                    "Object"
                  ],
                  "description": " configuration options\n\n   - options.timestep (Number = 1000.0/160): default timestep\n\n   ...\n\n "
                },
                {
                  "name": "fn",
                  "types": [
                    "Function",
                    "Array"
                  ],
                  "description": " Callback function or array of callbacks called with this === world\n\n "
                }
              ],
              "alias_of": "Physics",
              "description": "World Constructor.\n\nIf called with an array of functions, and any functions\nreturn a promise-like object, the remaining callbacks will\nbe called only when that promise is resolved.",
              "short_description": "World Constructor.\n",
              "line": 65,
              "aliases": [],
              "children": [],
              "file": "src/core/world.js",
              "name": "new",
              "name_prefix": "Physics.world.",
              "path": "Physics.world.new",
              "outFile": "world.html#Physics.world.new"
            }
          ],
          "file": "src/core/world.js",
          "subclasses": [],
          "name": "world",
          "name_prefix": "Physics.",
          "path": "Physics.world",
          "outFile": "world.html"
        }
      ],
      "file": "src/intro.js",
      "name": "Physics",
      "path": "Physics",
      "outFile": "intro.html#Physics"
    },
    "Physics.util": {
      "id": "Physics.util",
      "type": "namespace",
      "description": "Namespace for utility functions. It contains a subset of\nthe [lodash API](http://lodash.com/docs).",
      "short_description": "Namespace for utility functions. It contains a subset of\nthe [lodash API](http://lodash.com/docs).",
      "line": 46,
      "aliases": [],
      "children": [
        {
          "id": "Physics.util.decorator",
          "type": "class method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "type",
                  "types": [
                    "String"
                  ],
                  "description": " The name of the factory you are creating\n\n "
                },
                {
                  "name": "protoDef",
                  "optional": true,
                  "types": [
                    "Object"
                  ],
                  "description": " The top-level prototype\n\n "
                }
              ],
              "returns": [
                {
                  "type": "Function",
                  "description": " The factory function\n\n "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "type",
              "types": [
                "String"
              ],
              "description": " The name of the factory you are creating\n\n "
            },
            {
              "name": "protoDef",
              "types": [
                "Object"
              ],
              "description": " The top-level prototype\n\n "
            }
          ],
          "returns": [
            {
              "type": "Function",
              "description": " The factory function\n\n "
            }
          ],
          "related_to": "factory",
          "description": "Facilitates creation of decorator factory functions.\n\nSee the [[factory]] definition for the factory signatures.\n[For full documentation and examples, please visit the wiki](https://github.com/wellcaffeinated/PhysicsJS/wiki/Fundamentals#the-factory-pattern).\n\nExample:\n\n```javascript\nvar factory = Physics.util.decorator('factory', {\n     // prototype methods...\n     method: function( args ){\n     }\n});\n\n// define\nfactory( 'name', 'parent-name', function( parent ){\n\n     // extend further...\n     return {\n         // overrides\n         init: function( cfg ){\n             parent.init.call(this, cfg);\n         }\n     };\n});\n\n// instantiate\nvar options = { key: 'val' };\nvar instance = factory( 'name', options );\n```",
          "short_description": "Facilitates creation of decorator factory functions.\n",
          "line": 38,
          "aliases": [],
          "children": [],
          "file": "src/util/decorator.js",
          "name": "decorator",
          "name_prefix": "Physics.util.",
          "path": "Physics.util.decorator",
          "outFile": "decorator.html#Physics.util.decorator"
        },
        {
          "id": "Physics.util.indexOf",
          "type": "class method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "arr",
                  "types": [
                    "Array"
                  ],
                  "description": " The array to search\n\n "
                },
                {
                  "name": "value",
                  "types": [
                    "Mixed"
                  ],
                  "description": " The value to find\n\n "
                }
              ],
              "returns": [
                {
                  "type": "Number",
                  "description": " The index of `value` in the array OR `-1` if not found\n\n "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "arr",
              "types": [
                "Array"
              ],
              "description": " The array to search\n\n "
            },
            {
              "name": "value",
              "types": [
                "Mixed"
              ],
              "description": " The value to find\n\n "
            }
          ],
          "returns": [
            {
              "type": "Number",
              "description": " The index of `value` in the array OR `-1` if not found\n\n "
            }
          ],
          "description": "Fast indexOf implementation.",
          "short_description": "Fast indexOf implementation.",
          "line": 9,
          "aliases": [],
          "children": [],
          "file": "src/util/helpers.js",
          "name": "indexOf",
          "name_prefix": "Physics.util.",
          "path": "Physics.util.indexOf",
          "outFile": "helpers.html#Physics.util.indexOf"
        },
        {
          "id": "Physics.util.options",
          "type": "class method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "def",
                  "types": [
                    "Object"
                  ],
                  "description": " Default options to set\n\n "
                },
                {
                  "name": "target",
                  "optional": true,
                  "types": [
                    "Object"
                  ],
                  "description": " Where to copy the options to. Defaults to the returned function.\n\n "
                }
              ],
              "returns": [
                {
                  "type": "Function",
                  "description": " The options function\n\n "
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "def",
              "types": [
                "Object"
              ],
              "description": " Default options to set\n\n "
            },
            {
              "name": "target",
              "types": [
                "Object"
              ],
              "description": " Where to copy the options to. Defaults to the returned function.\n\n "
            }
          ],
          "returns": [
            {
              "type": "Function",
              "description": " The options function\n\n "
            }
          ],
          "description": "Options helper to keep track of options. Call it with a config object. Access options directly on the function.\n\nExample:\n\n```javascript\nthis.options = Physics.util.options({ foo: 'bar', opt: 'def' });\nthis.options({ opt: 'myVal' });\n\nthis.options.foo; // === 'bar'\nthis.options.def; // === 'myVal'\n\n// can also change defaults later\nthis.options.defaults({ foo: 'baz' });\n\n// can add a change callback\nthis.options.onChange(function( opts ){\n    // some option changed\n    // opts is the target\n});\n```",
          "short_description": "Options helper to keep track of options. Call it with a config object. Access options directly on the function.\n",
          "line": 51,
          "aliases": [],
          "children": [],
          "file": "src/util/helpers.js",
          "name": "options",
          "name_prefix": "Physics.util.",
          "path": "Physics.util.options",
          "outFile": "helpers.html#Physics.util.options"
        },
        {
          "id": "Physics.util.pubsub",
          "type": "class",
          "description": "Fast pubsub implementation.\n\nCan be mixed into other classes easily.",
          "short_description": "Fast pubsub implementation.\n",
          "line": 10,
          "aliases": [],
          "children": [
            {
              "id": "Physics.util.pubsub#emit",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "topic",
                      "types": [
                        "String"
                      ],
                      "description": " The topic name\n\n     "
                    },
                    {
                      "name": "data",
                      "optional": true,
                      "types": [
                        "Mixed"
                      ],
                      "description": " The data to send\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "topic",
                  "types": [
                    "String"
                  ],
                  "description": " The topic name\n\n     "
                },
                {
                  "name": "data",
                  "types": [
                    "Mixed"
                  ],
                  "description": " The data to send\n\n     "
                }
              ],
              "description": "Publish data to a topic.",
              "short_description": "Publish data to a topic.",
              "line": 146,
              "aliases": [],
              "children": [],
              "file": "src/util/pubsub.js",
              "name": "emit",
              "name_prefix": "Physics.util.pubsub#",
              "path": "Physics.util.pubsub.prototype.emit",
              "outFile": "pubsub.html#Physics.util.pubsub.prototype.emit"
            },
            {
              "id": "Physics.util.pubsub#off",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "topic",
                      "types": [
                        "String"
                      ],
                      "description": " topic The topic name. Specify `true` to remove all listeners for all topics\n\n     "
                    },
                    {
                      "name": "fn",
                      "types": [
                        "Function"
                      ],
                      "description": " fn The original callback function. Specify `true` to remove all listeners for specified topic\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                },
                {
                  "arguments": [
                    {
                      "name": "topicCfg",
                      "types": [
                        "Object"
                      ],
                      "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "topic",
                  "types": [
                    "String"
                  ],
                  "description": " topic The topic name. Specify `true` to remove all listeners for all topics\n\n     "
                },
                {
                  "name": "topicCfg",
                  "types": [
                    "Object"
                  ],
                  "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                },
                {
                  "name": "fn",
                  "types": [
                    "Function"
                  ],
                  "description": " fn The original callback function. Specify `true` to remove all listeners for specified topic\n\n     "
                }
              ],
              "description": "Unsubscribe callback(s) from topic(s).",
              "short_description": "Unsubscribe callback(s) from topic(s).",
              "line": 85,
              "aliases": [],
              "children": [],
              "file": "src/util/pubsub.js",
              "name": "off",
              "name_prefix": "Physics.util.pubsub#",
              "path": "Physics.util.pubsub.prototype.off",
              "outFile": "pubsub.html#Physics.util.pubsub.prototype.off"
            },
            {
              "id": "Physics.util.pubsub#on",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "topic",
                      "types": [
                        "String"
                      ],
                      "description": " The topic name\n\n     "
                    },
                    {
                      "name": "fn",
                      "arguments": [
                        {
                          "name": "data"
                        },
                        {
                          "name": "event"
                        }
                      ],
                      "callback": true,
                      "types": [
                        "Function"
                      ],
                      "description": " The callback function (if not using Object as previous argument)\n\n     "
                    },
                    {
                      "name": "scope",
                      "optional": true,
                      "types": [
                        "Object"
                      ],
                      "description": " The scope to bind callback to\n\n     "
                    },
                    {
                      "name": "priority",
                      "optional": true,
                      "types": [
                        "Number"
                      ],
                      "description": " The priority of the callback (higher is earlier)\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                },
                {
                  "arguments": [
                    {
                      "name": "topicConfig",
                      "types": [
                        "Object"
                      ],
                      "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                    },
                    {
                      "name": "scope",
                      "optional": true,
                      "types": [
                        "Object"
                      ],
                      "description": " The scope to bind callback to\n\n     "
                    },
                    {
                      "name": "priority",
                      "optional": true,
                      "types": [
                        "Number"
                      ],
                      "description": " The priority of the callback (higher is earlier)\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "topic",
                  "types": [
                    "String"
                  ],
                  "description": " The topic name\n\n     "
                },
                {
                  "name": "topicConfig",
                  "types": [
                    "Object"
                  ],
                  "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                },
                {
                  "name": "fn",
                  "types": [
                    "Function"
                  ],
                  "description": " The callback function (if not using Object as previous argument)\n\n     "
                },
                {
                  "name": "data",
                  "types": [
                    "Mixed"
                  ],
                  "description": " The data sent from the call to `.emit()`\n\n     "
                },
                {
                  "name": "event",
                  "types": [
                    "Object"
                  ],
                  "description": " Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n\n     "
                },
                {
                  "name": "scope",
                  "types": [
                    "Object"
                  ],
                  "description": " The scope to bind callback to\n\n     "
                },
                {
                  "name": "priority",
                  "types": [
                    "Number"
                  ],
                  "description": " The priority of the callback (higher is earlier)\n\n     "
                }
              ],
              "description": "Subscribe callback(s) to a topic(s).",
              "short_description": "Subscribe callback(s) to a topic(s).",
              "line": 32,
              "aliases": [],
              "children": [],
              "file": "src/util/pubsub.js",
              "name": "on",
              "name_prefix": "Physics.util.pubsub#",
              "path": "Physics.util.pubsub.prototype.on",
              "outFile": "pubsub.html#Physics.util.pubsub.prototype.on"
            },
            {
              "id": "Physics.util.pubsub#one",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "topic",
                      "types": [
                        "String"
                      ],
                      "description": " The topic name\n\n     "
                    },
                    {
                      "name": "fn",
                      "arguments": [
                        {
                          "name": "data"
                        },
                        {
                          "name": "event"
                        }
                      ],
                      "callback": true,
                      "types": [
                        "Function"
                      ],
                      "description": " The callback function (if not using Object as previous argument)\n\n     "
                    },
                    {
                      "name": "scope",
                      "optional": true,
                      "types": [
                        "Object"
                      ],
                      "description": " The scope to bind callback to\n\n     "
                    },
                    {
                      "name": "priority",
                      "optional": true,
                      "types": [
                        "Number"
                      ],
                      "description": " The priority of the callback (higher is earlier)\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                },
                {
                  "arguments": [
                    {
                      "name": "topicConfig",
                      "types": [
                        "Object"
                      ],
                      "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                    },
                    {
                      "name": "scope",
                      "optional": true,
                      "types": [
                        "Object"
                      ],
                      "description": " The scope to bind callback to\n\n     "
                    },
                    {
                      "name": "priority",
                      "optional": true,
                      "types": [
                        "Number"
                      ],
                      "description": " The priority of the callback (higher is earlier)\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "topic",
                  "types": [
                    "String"
                  ],
                  "description": " The topic name\n\n     "
                },
                {
                  "name": "topicConfig",
                  "types": [
                    "Object"
                  ],
                  "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                },
                {
                  "name": "fn",
                  "types": [
                    "Function"
                  ],
                  "description": " The callback function (if not using Object as previous argument)\n\n     "
                },
                {
                  "name": "data",
                  "types": [
                    "Mixed"
                  ],
                  "description": " The data sent from the call to `.emit()`\n\n     "
                },
                {
                  "name": "event",
                  "types": [
                    "Object"
                  ],
                  "description": " Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n\n     "
                },
                {
                  "name": "scope",
                  "types": [
                    "Object"
                  ],
                  "description": " The scope to bind callback to\n\n     "
                },
                {
                  "name": "priority",
                  "types": [
                    "Number"
                  ],
                  "description": " The priority of the callback (higher is earlier)\n\n     "
                }
              ],
              "description": "Subscribe callback(s) to a topic(s), but only ONCE.",
              "short_description": "Subscribe callback(s) to a topic(s), but only ONCE.",
              "line": 197,
              "aliases": [],
              "children": [],
              "file": "src/util/pubsub.js",
              "name": "one",
              "name_prefix": "Physics.util.pubsub#",
              "path": "Physics.util.pubsub.prototype.one",
              "outFile": "pubsub.html#Physics.util.pubsub.prototype.one"
            }
          ],
          "file": "src/util/pubsub.js",
          "subclasses": [],
          "name": "pubsub",
          "name_prefix": "Physics.util.",
          "path": "Physics.util.pubsub",
          "outFile": "pubsub.html"
        },
        {
          "id": "Physics.util.ticker",
          "type": "class",
          "description": "The Ticker _singleton_ for easily binding callbacks to animation loops (requestAnimationFrame).\n\nRequires window.requestAnimationFrame... so polyfill it if you need to.",
          "short_description": "The Ticker _singleton_ for easily binding callbacks to animation loops (requestAnimationFrame).\n",
          "line": 8,
          "aliases": [],
          "children": [
            {
              "id": "Physics.util.ticker.isActive",
              "type": "class method",
              "signatures": [
                {
                  "arguments": [],
                  "returns": [
                    {
                      "type": "Boolean"
                    }
                  ]
                }
              ],
              "returns": [
                {
                  "type": "Boolean",
                  "description": " `true` if running, `false` otherwise.\n\n "
                }
              ],
              "description": "Determine if ticker is currently running.",
              "short_description": "Determine if ticker is currently running.",
              "line": 92,
              "aliases": [],
              "children": [],
              "file": "src/util/ticker.js",
              "name": "isActive",
              "name_prefix": "Physics.util.ticker.",
              "path": "Physics.util.ticker.isActive",
              "outFile": "ticker.html#Physics.util.ticker.isActive"
            },
            {
              "id": "Physics.util.ticker.off",
              "type": "class method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "listener",
                      "types": [
                        "Function"
                      ],
                      "description": " The callback function previously bound\n\n "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "listener",
                  "types": [
                    "Function"
                  ],
                  "description": " The callback function previously bound\n\n "
                }
              ],
              "description": "Unsubscribe a callback from the ticker.",
              "short_description": "Unsubscribe a callback from the ticker.",
              "line": 80,
              "aliases": [],
              "children": [],
              "file": "src/util/ticker.js",
              "name": "off",
              "name_prefix": "Physics.util.ticker.",
              "path": "Physics.util.ticker.off",
              "outFile": "ticker.html#Physics.util.ticker.off"
            },
            {
              "id": "Physics.util.ticker.on",
              "type": "class method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "listener",
                      "arguments": [
                        {
                          "name": "time",
                          "description": " The current timestamp\n\n ",
                          "types": [
                            "Number"
                          ]
                        }
                      ],
                      "callback": true,
                      "types": [
                        "Function"
                      ],
                      "description": " The callback function\n\n "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "listener",
                  "types": [
                    "Function"
                  ],
                  "description": " The callback function\n\n "
                },
                {
                  "name": "time",
                  "types": [
                    "Number"
                  ],
                  "description": " The current timestamp\n\n "
                }
              ],
              "description": "Subscribe a callback to the ticker.",
              "short_description": "Subscribe a callback to the ticker.",
              "line": 68,
              "aliases": [],
              "children": [],
              "file": "src/util/ticker.js",
              "name": "on",
              "name_prefix": "Physics.util.ticker.",
              "path": "Physics.util.ticker.on",
              "outFile": "ticker.html#Physics.util.ticker.on"
            },
            {
              "id": "Physics.util.ticker.start",
              "type": "class method",
              "signatures": [
                {
                  "arguments": [],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "description": "Start the ticker",
              "short_description": "Start the ticker",
              "line": 43,
              "aliases": [],
              "children": [],
              "file": "src/util/ticker.js",
              "name": "start",
              "name_prefix": "Physics.util.ticker.",
              "path": "Physics.util.ticker.start",
              "outFile": "ticker.html#Physics.util.ticker.start"
            },
            {
              "id": "Physics.util.ticker.stop",
              "type": "class method",
              "signatures": [
                {
                  "arguments": [],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "description": "Stop the ticker",
              "short_description": "Stop the ticker",
              "line": 55,
              "aliases": [],
              "children": [],
              "file": "src/util/ticker.js",
              "name": "stop",
              "name_prefix": "Physics.util.ticker.",
              "path": "Physics.util.ticker.stop",
              "outFile": "ticker.html#Physics.util.ticker.stop"
            }
          ],
          "file": "src/util/ticker.js",
          "subclasses": [],
          "name": "ticker",
          "name_prefix": "Physics.util.",
          "path": "Physics.util.ticker",
          "outFile": "ticker.html"
        }
      ],
      "file": "src/intro.js",
      "name": "util",
      "name_prefix": "Physics.",
      "path": "Physics.util",
      "outFile": "intro.html#Physics.util"
    },
    "Classes": {
      "id": "Classes",
      "type": "namespace",
      "description": "",
      "short_description": "",
      "line": 51,
      "aliases": [],
      "children": [
        {
          "id": "Behavior",
          "type": "class",
          "belongs_to": "Classes",
          "description": "The base class for behaviors created by [[Physics.behavior]].",
          "short_description": "The base class for behaviors created by [[Physics.behavior]].",
          "line": 24,
          "aliases": [],
          "children": [
            {
              "id": "Behavior#behave",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "data",
                      "types": [
                        "Object"
                      ],
                      "description": " The pubsub `integrate:positions` event data\n\n     "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "data",
                  "types": [
                    "Object"
                  ],
                  "description": " The pubsub `integrate:positions` event data\n\n     "
                }
              ],
              "description": "Default method run on every world integration.\n\nYou _must_ extend this when creating a behavior,\nunless you extend the [[Behavior#connect]] and [[Behavior#disconnect]] methods.",
              "short_description": "Default method run on every world integration.\n",
              "line": 128,
              "aliases": [],
              "children": [],
              "file": "src/core/behavior.js",
              "name": "behave",
              "name_prefix": "Behavior#",
              "path": "Behavior.prototype.behave",
              "outFile": "behavior.html#Behavior.prototype.behave"
            },
            {
              "id": "Behavior#connect",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "world",
                      "types": [
                        "Physics.world"
                      ],
                      "description": " The world to connect to\n\n     "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "world",
                  "types": [
                    "Physics.world"
                  ],
                  "description": " The world to connect to\n\n     "
                }
              ],
              "description": "Connect to a world.\n\nExtend this when creating behaviors if you need to specify pubsub management.\nAutomatically called when added to world by the [[Behavior#setWorld]] method.",
              "short_description": "Connect to a world.\n",
              "line": 96,
              "aliases": [],
              "children": [],
              "file": "src/core/behavior.js",
              "name": "connect",
              "name_prefix": "Behavior#",
              "path": "Behavior.prototype.connect",
              "outFile": "behavior.html#Behavior.prototype.connect"
            },
            {
              "id": "Behavior#disconnect",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "world",
                      "types": [
                        "Physics.world"
                      ],
                      "description": " The world to disconnect from\n\n     "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "world",
                  "types": [
                    "Physics.world"
                  ],
                  "description": " The world to disconnect from\n\n     "
                }
              ],
              "description": "Disconnect from a world.\n\nExtend this when creating behaviors if you need to specify pubsub management.\nAutomatically called when added to world by the [[Behavior#setWorld]] method.",
              "short_description": "Disconnect from a world.\n",
              "line": 112,
              "aliases": [],
              "children": [],
              "file": "src/core/behavior.js",
              "name": "disconnect",
              "name_prefix": "Behavior#",
              "path": "Behavior.prototype.disconnect",
              "outFile": "behavior.html#Behavior.prototype.disconnect"
            },
            {
              "id": "Behavior#getTargets",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [],
                  "returns": [
                    {
                      "type": "Array"
                    }
                  ]
                }
              ],
              "returns": [
                {
                  "type": "Array",
                  "description": " The array of bodies (by reference!) this behavior is applied to.\n\n     "
                }
              ],
              "description": "Get the array of bodies (by reference!) this behavior is applied to.",
              "short_description": "Get the array of bodies (by reference!) this behavior is applied to.",
              "line": 59,
              "aliases": [],
              "children": [],
              "file": "src/core/behavior.js",
              "name": "getTargets",
              "name_prefix": "Behavior#",
              "path": "Behavior.prototype.getTargets",
              "outFile": "behavior.html#Behavior.prototype.getTargets"
            },
            {
              "id": "Behavior#init",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "options",
                      "types": [
                        "Object"
                      ],
                      "description": " The configuration options passed by the factory\n\n     "
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "options",
                  "types": [
                    "Object"
                  ],
                  "description": " The configuration options passed by the factory\n\n     "
                }
              ],
              "internal": true,
              "description": "Initialization. Internal use.\n/\n       init: function( options ){\n           \n           this.options = Physics.util.options( defaults );\n           this.options( options );\n       },\n\n       /**\nBehavior#applyTo( arr ) -> this\n- arr (Array): Array of bodies to apply this behavior to. Specify `true` for all objects in world.\n\nApply the behavior to a group of bodies.",
              "short_description": "Initialization. Internal use.\n/\n       init: function( options ){\n           \n           this.options = Physics.util.options( defaults );\n           this.options( options );\n       },\n",
              "line": 43,
              "aliases": [],
              "children": [],
              "file": "src/core/behavior.js",
              "name": "init",
              "name_prefix": "Behavior#",
              "path": "Behavior.prototype.init",
              "outFile": "behavior.html#Behavior.prototype.init"
            },
            {
              "id": "Behavior#setWorld",
              "type": "instance method",
              "signatures": [
                {
                  "arguments": [
                    {
                      "name": "world",
                      "types": [
                        "Object"
                      ],
                      "description": " The world (or null)\n\n     "
                    }
                  ],
                  "returns": [
                    {
                      "type": "this"
                    }
                  ]
                }
              ],
              "arguments": [
                {
                  "name": "world",
                  "types": [
                    "Object"
                  ],
                  "description": " The world (or null)\n\n     "
                }
              ],
              "description": "Set which world to apply to.\n\nUsually this is called internally. Shouldn't be a need to call this yourself usually.",
              "short_description": "Set which world to apply to.\n",
              "line": 72,
              "aliases": [],
              "children": [],
              "file": "src/core/behavior.js",
              "name": "setWorld",
              "name_prefix": "Behavior#",
              "path": "Behavior.prototype.setWorld",
              "outFile": "behavior.html#Behavior.prototype.setWorld"
            }
          ],
          "file": "src/core/behavior.js",
          "subclasses": [],
          "name": "Behavior",
          "path": "Behavior",
          "outFile": "behavior.html"
        }
      ],
      "file": "src/intro.js",
      "name": "Classes",
      "path": "Classes",
      "outFile": "intro.html#Classes"
    },
    "Special": {
      "id": "Special",
      "type": "namespace",
      "description": "",
      "short_description": "",
      "line": 55,
      "aliases": [],
      "children": [
        {
          "id": "factory",
          "type": "method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "name",
                  "types": [
                    "String"
                  ],
                  "description": "  The class name\n\n "
                },
                {
                  "name": "parentName",
                  "optional": true,
                  "types": [
                    "String"
                  ],
                  "description": " The name of parent class to extend\n\n "
                },
                {
                  "name": "decorator",
                  "types": [
                    "Function"
                  ],
                  "description": " The decorator function that should define and return methods to extend (decorate) the base class\n\n "
                },
                {
                  "name": "cfg",
                  "optional": true,
                  "types": [
                    "Object"
                  ],
                  "description": " The configuration to pass to the class initializer\n\n "
                }
              ]
            },
            {
              "arguments": [
                {
                  "name": "name",
                  "types": [
                    "String"
                  ],
                  "description": "  The class name\n\n "
                },
                {
                  "name": "cfg",
                  "types": [
                    "Object"
                  ],
                  "description": " The configuration to pass to the class initializer\n\n "
                }
              ],
              "returns": [
                {
                  "type": "Object"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "name",
              "types": [
                "String"
              ],
              "description": "  The class name\n\n "
            },
            {
              "name": "parentName",
              "types": [
                "String"
              ],
              "description": " The name of parent class to extend\n\n "
            },
            {
              "name": "decorator",
              "types": [
                "Function"
              ],
              "description": " The decorator function that should define and return methods to extend (decorate) the base class\n\n "
            },
            {
              "name": "cfg",
              "types": [
                "Object"
              ],
              "description": " The configuration to pass to the class initializer\n\n "
            }
          ],
          "belongs_to": "Special",
          "description": "Factory function for definition and instantiation of subclasses.\n\nUse the first signature (once) to define it first.\nIf defining without the \"cfg\" parameter, void will be returned. Otherwise the class instance will be returned.",
          "short_description": "Factory function for definition and instantiation of subclasses.\n",
          "line": 129,
          "aliases": [],
          "children": [],
          "file": "src/util/decorator.js",
          "name": "factory",
          "path": "factory",
          "outFile": "decorator.html#factory"
        }
      ],
      "file": "src/intro.js",
      "name": "Special",
      "path": "Special",
      "outFile": "intro.html#Special"
    },
    "Physics.util.decorator": {
      "id": "Physics.util.decorator",
      "type": "class method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "type",
              "types": [
                "String"
              ],
              "description": " The name of the factory you are creating\n\n "
            },
            {
              "name": "protoDef",
              "optional": true,
              "types": [
                "Object"
              ],
              "description": " The top-level prototype\n\n "
            }
          ],
          "returns": [
            {
              "type": "Function",
              "description": " The factory function\n\n "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "type",
          "types": [
            "String"
          ],
          "description": " The name of the factory you are creating\n\n "
        },
        {
          "name": "protoDef",
          "types": [
            "Object"
          ],
          "description": " The top-level prototype\n\n "
        }
      ],
      "returns": [
        {
          "type": "Function",
          "description": " The factory function\n\n "
        }
      ],
      "related_to": "factory",
      "description": "Facilitates creation of decorator factory functions.\n\nSee the [[factory]] definition for the factory signatures.\n[For full documentation and examples, please visit the wiki](https://github.com/wellcaffeinated/PhysicsJS/wiki/Fundamentals#the-factory-pattern).\n\nExample:\n\n```javascript\nvar factory = Physics.util.decorator('factory', {\n     // prototype methods...\n     method: function( args ){\n     }\n});\n\n// define\nfactory( 'name', 'parent-name', function( parent ){\n\n     // extend further...\n     return {\n         // overrides\n         init: function( cfg ){\n             parent.init.call(this, cfg);\n         }\n     };\n});\n\n// instantiate\nvar options = { key: 'val' };\nvar instance = factory( 'name', options );\n```",
      "short_description": "Facilitates creation of decorator factory functions.\n",
      "line": 38,
      "aliases": [],
      "children": [],
      "file": "src/util/decorator.js",
      "name": "decorator",
      "name_prefix": "Physics.util.",
      "path": "Physics.util.decorator",
      "outFile": "decorator.html#Physics.util.decorator"
    },
    "factory": {
      "id": "factory",
      "type": "method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "name",
              "types": [
                "String"
              ],
              "description": "  The class name\n\n "
            },
            {
              "name": "parentName",
              "optional": true,
              "types": [
                "String"
              ],
              "description": " The name of parent class to extend\n\n "
            },
            {
              "name": "decorator",
              "types": [
                "Function"
              ],
              "description": " The decorator function that should define and return methods to extend (decorate) the base class\n\n "
            },
            {
              "name": "cfg",
              "optional": true,
              "types": [
                "Object"
              ],
              "description": " The configuration to pass to the class initializer\n\n "
            }
          ]
        },
        {
          "arguments": [
            {
              "name": "name",
              "types": [
                "String"
              ],
              "description": "  The class name\n\n "
            },
            {
              "name": "cfg",
              "types": [
                "Object"
              ],
              "description": " The configuration to pass to the class initializer\n\n "
            }
          ],
          "returns": [
            {
              "type": "Object"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "name",
          "types": [
            "String"
          ],
          "description": "  The class name\n\n "
        },
        {
          "name": "parentName",
          "types": [
            "String"
          ],
          "description": " The name of parent class to extend\n\n "
        },
        {
          "name": "decorator",
          "types": [
            "Function"
          ],
          "description": " The decorator function that should define and return methods to extend (decorate) the base class\n\n "
        },
        {
          "name": "cfg",
          "types": [
            "Object"
          ],
          "description": " The configuration to pass to the class initializer\n\n "
        }
      ],
      "belongs_to": "Special",
      "description": "Factory function for definition and instantiation of subclasses.\n\nUse the first signature (once) to define it first.\nIf defining without the \"cfg\" parameter, void will be returned. Otherwise the class instance will be returned.",
      "short_description": "Factory function for definition and instantiation of subclasses.\n",
      "line": 129,
      "aliases": [],
      "children": [],
      "file": "src/util/decorator.js",
      "name": "factory",
      "path": "factory",
      "outFile": "decorator.html#factory"
    },
    "Physics.util.indexOf": {
      "id": "Physics.util.indexOf",
      "type": "class method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "arr",
              "types": [
                "Array"
              ],
              "description": " The array to search\n\n "
            },
            {
              "name": "value",
              "types": [
                "Mixed"
              ],
              "description": " The value to find\n\n "
            }
          ],
          "returns": [
            {
              "type": "Number",
              "description": " The index of `value` in the array OR `-1` if not found\n\n "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "arr",
          "types": [
            "Array"
          ],
          "description": " The array to search\n\n "
        },
        {
          "name": "value",
          "types": [
            "Mixed"
          ],
          "description": " The value to find\n\n "
        }
      ],
      "returns": [
        {
          "type": "Number",
          "description": " The index of `value` in the array OR `-1` if not found\n\n "
        }
      ],
      "description": "Fast indexOf implementation.",
      "short_description": "Fast indexOf implementation.",
      "line": 9,
      "aliases": [],
      "children": [],
      "file": "src/util/helpers.js",
      "name": "indexOf",
      "name_prefix": "Physics.util.",
      "path": "Physics.util.indexOf",
      "outFile": "helpers.html#Physics.util.indexOf"
    },
    "Physics.util.options": {
      "id": "Physics.util.options",
      "type": "class method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "def",
              "types": [
                "Object"
              ],
              "description": " Default options to set\n\n "
            },
            {
              "name": "target",
              "optional": true,
              "types": [
                "Object"
              ],
              "description": " Where to copy the options to. Defaults to the returned function.\n\n "
            }
          ],
          "returns": [
            {
              "type": "Function",
              "description": " The options function\n\n "
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "def",
          "types": [
            "Object"
          ],
          "description": " Default options to set\n\n "
        },
        {
          "name": "target",
          "types": [
            "Object"
          ],
          "description": " Where to copy the options to. Defaults to the returned function.\n\n "
        }
      ],
      "returns": [
        {
          "type": "Function",
          "description": " The options function\n\n "
        }
      ],
      "description": "Options helper to keep track of options. Call it with a config object. Access options directly on the function.\n\nExample:\n\n```javascript\nthis.options = Physics.util.options({ foo: 'bar', opt: 'def' });\nthis.options({ opt: 'myVal' });\n\nthis.options.foo; // === 'bar'\nthis.options.def; // === 'myVal'\n\n// can also change defaults later\nthis.options.defaults({ foo: 'baz' });\n\n// can add a change callback\nthis.options.onChange(function( opts ){\n    // some option changed\n    // opts is the target\n});\n```",
      "short_description": "Options helper to keep track of options. Call it with a config object. Access options directly on the function.\n",
      "line": 51,
      "aliases": [],
      "children": [],
      "file": "src/util/helpers.js",
      "name": "options",
      "name_prefix": "Physics.util.",
      "path": "Physics.util.options",
      "outFile": "helpers.html#Physics.util.options"
    },
    "Physics.noConflict": {
      "id": "Physics.noConflict",
      "type": "class method",
      "signatures": [
        {
          "arguments": [],
          "returns": [
            {
              "type": "Physics"
            }
          ]
        }
      ],
      "description": "Restore the original reference to the global window.Physics variable.\n\nDoes nothing if PhysicsJS doesn't have a reference in global scope",
      "short_description": "Restore the original reference to the global window.Physics variable.\n",
      "line": 12,
      "aliases": [],
      "children": [],
      "file": "src/util/noconflict.js",
      "name": "noConflict",
      "name_prefix": "Physics.",
      "path": "Physics.noConflict",
      "outFile": "noconflict.html#Physics.noConflict"
    },
    "Physics.util.pubsub": {
      "id": "Physics.util.pubsub",
      "type": "class",
      "description": "Fast pubsub implementation.\n\nCan be mixed into other classes easily.",
      "short_description": "Fast pubsub implementation.\n",
      "line": 10,
      "aliases": [],
      "children": [
        {
          "id": "Physics.util.pubsub#emit",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "topic",
                  "types": [
                    "String"
                  ],
                  "description": " The topic name\n\n     "
                },
                {
                  "name": "data",
                  "optional": true,
                  "types": [
                    "Mixed"
                  ],
                  "description": " The data to send\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "topic",
              "types": [
                "String"
              ],
              "description": " The topic name\n\n     "
            },
            {
              "name": "data",
              "types": [
                "Mixed"
              ],
              "description": " The data to send\n\n     "
            }
          ],
          "description": "Publish data to a topic.",
          "short_description": "Publish data to a topic.",
          "line": 146,
          "aliases": [],
          "children": [],
          "file": "src/util/pubsub.js",
          "name": "emit",
          "name_prefix": "Physics.util.pubsub#",
          "path": "Physics.util.pubsub.prototype.emit",
          "outFile": "pubsub.html#Physics.util.pubsub.prototype.emit"
        },
        {
          "id": "Physics.util.pubsub#off",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "topic",
                  "types": [
                    "String"
                  ],
                  "description": " topic The topic name. Specify `true` to remove all listeners for all topics\n\n     "
                },
                {
                  "name": "fn",
                  "types": [
                    "Function"
                  ],
                  "description": " fn The original callback function. Specify `true` to remove all listeners for specified topic\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            },
            {
              "arguments": [
                {
                  "name": "topicCfg",
                  "types": [
                    "Object"
                  ],
                  "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "topic",
              "types": [
                "String"
              ],
              "description": " topic The topic name. Specify `true` to remove all listeners for all topics\n\n     "
            },
            {
              "name": "topicCfg",
              "types": [
                "Object"
              ],
              "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
            },
            {
              "name": "fn",
              "types": [
                "Function"
              ],
              "description": " fn The original callback function. Specify `true` to remove all listeners for specified topic\n\n     "
            }
          ],
          "description": "Unsubscribe callback(s) from topic(s).",
          "short_description": "Unsubscribe callback(s) from topic(s).",
          "line": 85,
          "aliases": [],
          "children": [],
          "file": "src/util/pubsub.js",
          "name": "off",
          "name_prefix": "Physics.util.pubsub#",
          "path": "Physics.util.pubsub.prototype.off",
          "outFile": "pubsub.html#Physics.util.pubsub.prototype.off"
        },
        {
          "id": "Physics.util.pubsub#on",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "topic",
                  "types": [
                    "String"
                  ],
                  "description": " The topic name\n\n     "
                },
                {
                  "name": "fn",
                  "arguments": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "event"
                    }
                  ],
                  "callback": true,
                  "types": [
                    "Function"
                  ],
                  "description": " The callback function (if not using Object as previous argument)\n\n     "
                },
                {
                  "name": "scope",
                  "optional": true,
                  "types": [
                    "Object"
                  ],
                  "description": " The scope to bind callback to\n\n     "
                },
                {
                  "name": "priority",
                  "optional": true,
                  "types": [
                    "Number"
                  ],
                  "description": " The priority of the callback (higher is earlier)\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            },
            {
              "arguments": [
                {
                  "name": "topicConfig",
                  "types": [
                    "Object"
                  ],
                  "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                },
                {
                  "name": "scope",
                  "optional": true,
                  "types": [
                    "Object"
                  ],
                  "description": " The scope to bind callback to\n\n     "
                },
                {
                  "name": "priority",
                  "optional": true,
                  "types": [
                    "Number"
                  ],
                  "description": " The priority of the callback (higher is earlier)\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "topic",
              "types": [
                "String"
              ],
              "description": " The topic name\n\n     "
            },
            {
              "name": "topicConfig",
              "types": [
                "Object"
              ],
              "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
            },
            {
              "name": "fn",
              "types": [
                "Function"
              ],
              "description": " The callback function (if not using Object as previous argument)\n\n     "
            },
            {
              "name": "data",
              "types": [
                "Mixed"
              ],
              "description": " The data sent from the call to `.emit()`\n\n     "
            },
            {
              "name": "event",
              "types": [
                "Object"
              ],
              "description": " Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n\n     "
            },
            {
              "name": "scope",
              "types": [
                "Object"
              ],
              "description": " The scope to bind callback to\n\n     "
            },
            {
              "name": "priority",
              "types": [
                "Number"
              ],
              "description": " The priority of the callback (higher is earlier)\n\n     "
            }
          ],
          "description": "Subscribe callback(s) to a topic(s).",
          "short_description": "Subscribe callback(s) to a topic(s).",
          "line": 32,
          "aliases": [],
          "children": [],
          "file": "src/util/pubsub.js",
          "name": "on",
          "name_prefix": "Physics.util.pubsub#",
          "path": "Physics.util.pubsub.prototype.on",
          "outFile": "pubsub.html#Physics.util.pubsub.prototype.on"
        },
        {
          "id": "Physics.util.pubsub#one",
          "type": "instance method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "topic",
                  "types": [
                    "String"
                  ],
                  "description": " The topic name\n\n     "
                },
                {
                  "name": "fn",
                  "arguments": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "event"
                    }
                  ],
                  "callback": true,
                  "types": [
                    "Function"
                  ],
                  "description": " The callback function (if not using Object as previous argument)\n\n     "
                },
                {
                  "name": "scope",
                  "optional": true,
                  "types": [
                    "Object"
                  ],
                  "description": " The scope to bind callback to\n\n     "
                },
                {
                  "name": "priority",
                  "optional": true,
                  "types": [
                    "Number"
                  ],
                  "description": " The priority of the callback (higher is earlier)\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            },
            {
              "arguments": [
                {
                  "name": "topicConfig",
                  "types": [
                    "Object"
                  ],
                  "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                },
                {
                  "name": "scope",
                  "optional": true,
                  "types": [
                    "Object"
                  ],
                  "description": " The scope to bind callback to\n\n     "
                },
                {
                  "name": "priority",
                  "optional": true,
                  "types": [
                    "Number"
                  ],
                  "description": " The priority of the callback (higher is earlier)\n\n     "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "topic",
              "types": [
                "String"
              ],
              "description": " The topic name\n\n     "
            },
            {
              "name": "topicConfig",
              "types": [
                "Object"
              ],
              "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
            },
            {
              "name": "fn",
              "types": [
                "Function"
              ],
              "description": " The callback function (if not using Object as previous argument)\n\n     "
            },
            {
              "name": "data",
              "types": [
                "Mixed"
              ],
              "description": " The data sent from the call to `.emit()`\n\n     "
            },
            {
              "name": "event",
              "types": [
                "Object"
              ],
              "description": " Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n\n     "
            },
            {
              "name": "scope",
              "types": [
                "Object"
              ],
              "description": " The scope to bind callback to\n\n     "
            },
            {
              "name": "priority",
              "types": [
                "Number"
              ],
              "description": " The priority of the callback (higher is earlier)\n\n     "
            }
          ],
          "description": "Subscribe callback(s) to a topic(s), but only ONCE.",
          "short_description": "Subscribe callback(s) to a topic(s), but only ONCE.",
          "line": 197,
          "aliases": [],
          "children": [],
          "file": "src/util/pubsub.js",
          "name": "one",
          "name_prefix": "Physics.util.pubsub#",
          "path": "Physics.util.pubsub.prototype.one",
          "outFile": "pubsub.html#Physics.util.pubsub.prototype.one"
        }
      ],
      "file": "src/util/pubsub.js",
      "subclasses": [],
      "name": "pubsub",
      "name_prefix": "Physics.util.",
      "path": "Physics.util.pubsub",
      "outFile": "pubsub.html"
    },
    "Physics.util.pubsub#on": {
      "id": "Physics.util.pubsub#on",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "topic",
              "types": [
                "String"
              ],
              "description": " The topic name\n\n     "
            },
            {
              "name": "fn",
              "arguments": [
                {
                  "name": "data"
                },
                {
                  "name": "event"
                }
              ],
              "callback": true,
              "types": [
                "Function"
              ],
              "description": " The callback function (if not using Object as previous argument)\n\n     "
            },
            {
              "name": "scope",
              "optional": true,
              "types": [
                "Object"
              ],
              "description": " The scope to bind callback to\n\n     "
            },
            {
              "name": "priority",
              "optional": true,
              "types": [
                "Number"
              ],
              "description": " The priority of the callback (higher is earlier)\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        },
        {
          "arguments": [
            {
              "name": "topicConfig",
              "types": [
                "Object"
              ],
              "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
            },
            {
              "name": "scope",
              "optional": true,
              "types": [
                "Object"
              ],
              "description": " The scope to bind callback to\n\n     "
            },
            {
              "name": "priority",
              "optional": true,
              "types": [
                "Number"
              ],
              "description": " The priority of the callback (higher is earlier)\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "topic",
          "types": [
            "String"
          ],
          "description": " The topic name\n\n     "
        },
        {
          "name": "topicConfig",
          "types": [
            "Object"
          ],
          "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
        },
        {
          "name": "fn",
          "types": [
            "Function"
          ],
          "description": " The callback function (if not using Object as previous argument)\n\n     "
        },
        {
          "name": "data",
          "types": [
            "Mixed"
          ],
          "description": " The data sent from the call to `.emit()`\n\n     "
        },
        {
          "name": "event",
          "types": [
            "Object"
          ],
          "description": " Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n\n     "
        },
        {
          "name": "scope",
          "types": [
            "Object"
          ],
          "description": " The scope to bind callback to\n\n     "
        },
        {
          "name": "priority",
          "types": [
            "Number"
          ],
          "description": " The priority of the callback (higher is earlier)\n\n     "
        }
      ],
      "description": "Subscribe callback(s) to a topic(s).",
      "short_description": "Subscribe callback(s) to a topic(s).",
      "line": 32,
      "aliases": [],
      "children": [],
      "file": "src/util/pubsub.js",
      "name": "on",
      "name_prefix": "Physics.util.pubsub#",
      "path": "Physics.util.pubsub.prototype.on",
      "outFile": "pubsub.html#Physics.util.pubsub.prototype.on"
    },
    "Physics.util.pubsub#off": {
      "id": "Physics.util.pubsub#off",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "topic",
              "types": [
                "String"
              ],
              "description": " topic The topic name. Specify `true` to remove all listeners for all topics\n\n     "
            },
            {
              "name": "fn",
              "types": [
                "Function"
              ],
              "description": " fn The original callback function. Specify `true` to remove all listeners for specified topic\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        },
        {
          "arguments": [
            {
              "name": "topicCfg",
              "types": [
                "Object"
              ],
              "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "topic",
          "types": [
            "String"
          ],
          "description": " topic The topic name. Specify `true` to remove all listeners for all topics\n\n     "
        },
        {
          "name": "topicCfg",
          "types": [
            "Object"
          ],
          "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
        },
        {
          "name": "fn",
          "types": [
            "Function"
          ],
          "description": " fn The original callback function. Specify `true` to remove all listeners for specified topic\n\n     "
        }
      ],
      "description": "Unsubscribe callback(s) from topic(s).",
      "short_description": "Unsubscribe callback(s) from topic(s).",
      "line": 85,
      "aliases": [],
      "children": [],
      "file": "src/util/pubsub.js",
      "name": "off",
      "name_prefix": "Physics.util.pubsub#",
      "path": "Physics.util.pubsub.prototype.off",
      "outFile": "pubsub.html#Physics.util.pubsub.prototype.off"
    },
    "Physics.util.pubsub#emit": {
      "id": "Physics.util.pubsub#emit",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "topic",
              "types": [
                "String"
              ],
              "description": " The topic name\n\n     "
            },
            {
              "name": "data",
              "optional": true,
              "types": [
                "Mixed"
              ],
              "description": " The data to send\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "topic",
          "types": [
            "String"
          ],
          "description": " The topic name\n\n     "
        },
        {
          "name": "data",
          "types": [
            "Mixed"
          ],
          "description": " The data to send\n\n     "
        }
      ],
      "description": "Publish data to a topic.",
      "short_description": "Publish data to a topic.",
      "line": 146,
      "aliases": [],
      "children": [],
      "file": "src/util/pubsub.js",
      "name": "emit",
      "name_prefix": "Physics.util.pubsub#",
      "path": "Physics.util.pubsub.prototype.emit",
      "outFile": "pubsub.html#Physics.util.pubsub.prototype.emit"
    },
    "Physics.util.pubsub#one": {
      "id": "Physics.util.pubsub#one",
      "type": "instance method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "topic",
              "types": [
                "String"
              ],
              "description": " The topic name\n\n     "
            },
            {
              "name": "fn",
              "arguments": [
                {
                  "name": "data"
                },
                {
                  "name": "event"
                }
              ],
              "callback": true,
              "types": [
                "Function"
              ],
              "description": " The callback function (if not using Object as previous argument)\n\n     "
            },
            {
              "name": "scope",
              "optional": true,
              "types": [
                "Object"
              ],
              "description": " The scope to bind callback to\n\n     "
            },
            {
              "name": "priority",
              "optional": true,
              "types": [
                "Number"
              ],
              "description": " The priority of the callback (higher is earlier)\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        },
        {
          "arguments": [
            {
              "name": "topicConfig",
              "types": [
                "Object"
              ],
              "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
            },
            {
              "name": "scope",
              "optional": true,
              "types": [
                "Object"
              ],
              "description": " The scope to bind callback to\n\n     "
            },
            {
              "name": "priority",
              "optional": true,
              "types": [
                "Number"
              ],
              "description": " The priority of the callback (higher is earlier)\n\n     "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "topic",
          "types": [
            "String"
          ],
          "description": " The topic name\n\n     "
        },
        {
          "name": "topicConfig",
          "types": [
            "Object"
          ],
          "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
        },
        {
          "name": "fn",
          "types": [
            "Function"
          ],
          "description": " The callback function (if not using Object as previous argument)\n\n     "
        },
        {
          "name": "data",
          "types": [
            "Mixed"
          ],
          "description": " The data sent from the call to `.emit()`\n\n     "
        },
        {
          "name": "event",
          "types": [
            "Object"
          ],
          "description": " Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n\n     "
        },
        {
          "name": "scope",
          "types": [
            "Object"
          ],
          "description": " The scope to bind callback to\n\n     "
        },
        {
          "name": "priority",
          "types": [
            "Number"
          ],
          "description": " The priority of the callback (higher is earlier)\n\n     "
        }
      ],
      "description": "Subscribe callback(s) to a topic(s), but only ONCE.",
      "short_description": "Subscribe callback(s) to a topic(s), but only ONCE.",
      "line": 197,
      "aliases": [],
      "children": [],
      "file": "src/util/pubsub.js",
      "name": "one",
      "name_prefix": "Physics.util.pubsub#",
      "path": "Physics.util.pubsub.prototype.one",
      "outFile": "pubsub.html#Physics.util.pubsub.prototype.one"
    },
    "Physics.util.ticker": {
      "id": "Physics.util.ticker",
      "type": "class",
      "description": "The Ticker _singleton_ for easily binding callbacks to animation loops (requestAnimationFrame).\n\nRequires window.requestAnimationFrame... so polyfill it if you need to.",
      "short_description": "The Ticker _singleton_ for easily binding callbacks to animation loops (requestAnimationFrame).\n",
      "line": 8,
      "aliases": [],
      "children": [
        {
          "id": "Physics.util.ticker.isActive",
          "type": "class method",
          "signatures": [
            {
              "arguments": [],
              "returns": [
                {
                  "type": "Boolean"
                }
              ]
            }
          ],
          "returns": [
            {
              "type": "Boolean",
              "description": " `true` if running, `false` otherwise.\n\n "
            }
          ],
          "description": "Determine if ticker is currently running.",
          "short_description": "Determine if ticker is currently running.",
          "line": 92,
          "aliases": [],
          "children": [],
          "file": "src/util/ticker.js",
          "name": "isActive",
          "name_prefix": "Physics.util.ticker.",
          "path": "Physics.util.ticker.isActive",
          "outFile": "ticker.html#Physics.util.ticker.isActive"
        },
        {
          "id": "Physics.util.ticker.off",
          "type": "class method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "listener",
                  "types": [
                    "Function"
                  ],
                  "description": " The callback function previously bound\n\n "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "listener",
              "types": [
                "Function"
              ],
              "description": " The callback function previously bound\n\n "
            }
          ],
          "description": "Unsubscribe a callback from the ticker.",
          "short_description": "Unsubscribe a callback from the ticker.",
          "line": 80,
          "aliases": [],
          "children": [],
          "file": "src/util/ticker.js",
          "name": "off",
          "name_prefix": "Physics.util.ticker.",
          "path": "Physics.util.ticker.off",
          "outFile": "ticker.html#Physics.util.ticker.off"
        },
        {
          "id": "Physics.util.ticker.on",
          "type": "class method",
          "signatures": [
            {
              "arguments": [
                {
                  "name": "listener",
                  "arguments": [
                    {
                      "name": "time",
                      "description": " The current timestamp\n\n ",
                      "types": [
                        "Number"
                      ]
                    }
                  ],
                  "callback": true,
                  "types": [
                    "Function"
                  ],
                  "description": " The callback function\n\n "
                }
              ],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "listener",
              "types": [
                "Function"
              ],
              "description": " The callback function\n\n "
            },
            {
              "name": "time",
              "types": [
                "Number"
              ],
              "description": " The current timestamp\n\n "
            }
          ],
          "description": "Subscribe a callback to the ticker.",
          "short_description": "Subscribe a callback to the ticker.",
          "line": 68,
          "aliases": [],
          "children": [],
          "file": "src/util/ticker.js",
          "name": "on",
          "name_prefix": "Physics.util.ticker.",
          "path": "Physics.util.ticker.on",
          "outFile": "ticker.html#Physics.util.ticker.on"
        },
        {
          "id": "Physics.util.ticker.start",
          "type": "class method",
          "signatures": [
            {
              "arguments": [],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "description": "Start the ticker",
          "short_description": "Start the ticker",
          "line": 43,
          "aliases": [],
          "children": [],
          "file": "src/util/ticker.js",
          "name": "start",
          "name_prefix": "Physics.util.ticker.",
          "path": "Physics.util.ticker.start",
          "outFile": "ticker.html#Physics.util.ticker.start"
        },
        {
          "id": "Physics.util.ticker.stop",
          "type": "class method",
          "signatures": [
            {
              "arguments": [],
              "returns": [
                {
                  "type": "this"
                }
              ]
            }
          ],
          "description": "Stop the ticker",
          "short_description": "Stop the ticker",
          "line": 55,
          "aliases": [],
          "children": [],
          "file": "src/util/ticker.js",
          "name": "stop",
          "name_prefix": "Physics.util.ticker.",
          "path": "Physics.util.ticker.stop",
          "outFile": "ticker.html#Physics.util.ticker.stop"
        }
      ],
      "file": "src/util/ticker.js",
      "subclasses": [],
      "name": "ticker",
      "name_prefix": "Physics.util.",
      "path": "Physics.util.ticker",
      "outFile": "ticker.html"
    },
    "Physics.util.ticker.start": {
      "id": "Physics.util.ticker.start",
      "type": "class method",
      "signatures": [
        {
          "arguments": [],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "description": "Start the ticker",
      "short_description": "Start the ticker",
      "line": 43,
      "aliases": [],
      "children": [],
      "file": "src/util/ticker.js",
      "name": "start",
      "name_prefix": "Physics.util.ticker.",
      "path": "Physics.util.ticker.start",
      "outFile": "ticker.html#Physics.util.ticker.start"
    },
    "Physics.util.ticker.stop": {
      "id": "Physics.util.ticker.stop",
      "type": "class method",
      "signatures": [
        {
          "arguments": [],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "description": "Stop the ticker",
      "short_description": "Stop the ticker",
      "line": 55,
      "aliases": [],
      "children": [],
      "file": "src/util/ticker.js",
      "name": "stop",
      "name_prefix": "Physics.util.ticker.",
      "path": "Physics.util.ticker.stop",
      "outFile": "ticker.html#Physics.util.ticker.stop"
    },
    "Physics.util.ticker.on": {
      "id": "Physics.util.ticker.on",
      "type": "class method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "listener",
              "arguments": [
                {
                  "name": "time",
                  "description": " The current timestamp\n\n ",
                  "types": [
                    "Number"
                  ]
                }
              ],
              "callback": true,
              "types": [
                "Function"
              ],
              "description": " The callback function\n\n "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "listener",
          "types": [
            "Function"
          ],
          "description": " The callback function\n\n "
        },
        {
          "name": "time",
          "types": [
            "Number"
          ],
          "description": " The current timestamp\n\n "
        }
      ],
      "description": "Subscribe a callback to the ticker.",
      "short_description": "Subscribe a callback to the ticker.",
      "line": 68,
      "aliases": [],
      "children": [],
      "file": "src/util/ticker.js",
      "name": "on",
      "name_prefix": "Physics.util.ticker.",
      "path": "Physics.util.ticker.on",
      "outFile": "ticker.html#Physics.util.ticker.on"
    },
    "Physics.util.ticker.off": {
      "id": "Physics.util.ticker.off",
      "type": "class method",
      "signatures": [
        {
          "arguments": [
            {
              "name": "listener",
              "types": [
                "Function"
              ],
              "description": " The callback function previously bound\n\n "
            }
          ],
          "returns": [
            {
              "type": "this"
            }
          ]
        }
      ],
      "arguments": [
        {
          "name": "listener",
          "types": [
            "Function"
          ],
          "description": " The callback function previously bound\n\n "
        }
      ],
      "description": "Unsubscribe a callback from the ticker.",
      "short_description": "Unsubscribe a callback from the ticker.",
      "line": 80,
      "aliases": [],
      "children": [],
      "file": "src/util/ticker.js",
      "name": "off",
      "name_prefix": "Physics.util.ticker.",
      "path": "Physics.util.ticker.off",
      "outFile": "ticker.html#Physics.util.ticker.off"
    },
    "Physics.util.ticker.isActive": {
      "id": "Physics.util.ticker.isActive",
      "type": "class method",
      "signatures": [
        {
          "arguments": [],
          "returns": [
            {
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": [
        {
          "type": "Boolean",
          "description": " `true` if running, `false` otherwise.\n\n "
        }
      ],
      "description": "Determine if ticker is currently running.",
      "short_description": "Determine if ticker is currently running.",
      "line": 92,
      "aliases": [],
      "children": [],
      "file": "src/util/ticker.js",
      "name": "isActive",
      "name_prefix": "Physics.util.ticker.",
      "path": "Physics.util.ticker.isActive",
      "outFile": "ticker.html#Physics.util.ticker.isActive"
    }
  },
  "tree": {
    "children": [
      {
        "id": "Classes",
        "type": "namespace",
        "description": "",
        "short_description": "",
        "line": 51,
        "aliases": [],
        "children": [
          {
            "id": "Behavior",
            "type": "class",
            "belongs_to": "Classes",
            "description": "The base class for behaviors created by [[Physics.behavior]].",
            "short_description": "The base class for behaviors created by [[Physics.behavior]].",
            "line": 24,
            "aliases": [],
            "children": [
              {
                "id": "Behavior#behave",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "data",
                        "types": [
                          "Object"
                        ],
                        "description": " The pubsub `integrate:positions` event data\n\n     "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "data",
                    "types": [
                      "Object"
                    ],
                    "description": " The pubsub `integrate:positions` event data\n\n     "
                  }
                ],
                "description": "Default method run on every world integration.\n\nYou _must_ extend this when creating a behavior,\nunless you extend the [[Behavior#connect]] and [[Behavior#disconnect]] methods.",
                "short_description": "Default method run on every world integration.\n",
                "line": 128,
                "aliases": [],
                "children": [],
                "file": "src/core/behavior.js",
                "name": "behave",
                "name_prefix": "Behavior#",
                "path": "Behavior.prototype.behave",
                "outFile": "behavior.html#Behavior.prototype.behave"
              },
              {
                "id": "Behavior#connect",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "world",
                        "types": [
                          "Physics.world"
                        ],
                        "description": " The world to connect to\n\n     "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "world",
                    "types": [
                      "Physics.world"
                    ],
                    "description": " The world to connect to\n\n     "
                  }
                ],
                "description": "Connect to a world.\n\nExtend this when creating behaviors if you need to specify pubsub management.\nAutomatically called when added to world by the [[Behavior#setWorld]] method.",
                "short_description": "Connect to a world.\n",
                "line": 96,
                "aliases": [],
                "children": [],
                "file": "src/core/behavior.js",
                "name": "connect",
                "name_prefix": "Behavior#",
                "path": "Behavior.prototype.connect",
                "outFile": "behavior.html#Behavior.prototype.connect"
              },
              {
                "id": "Behavior#disconnect",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "world",
                        "types": [
                          "Physics.world"
                        ],
                        "description": " The world to disconnect from\n\n     "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "world",
                    "types": [
                      "Physics.world"
                    ],
                    "description": " The world to disconnect from\n\n     "
                  }
                ],
                "description": "Disconnect from a world.\n\nExtend this when creating behaviors if you need to specify pubsub management.\nAutomatically called when added to world by the [[Behavior#setWorld]] method.",
                "short_description": "Disconnect from a world.\n",
                "line": 112,
                "aliases": [],
                "children": [],
                "file": "src/core/behavior.js",
                "name": "disconnect",
                "name_prefix": "Behavior#",
                "path": "Behavior.prototype.disconnect",
                "outFile": "behavior.html#Behavior.prototype.disconnect"
              },
              {
                "id": "Behavior#getTargets",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [],
                    "returns": [
                      {
                        "type": "Array"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Array",
                    "description": " The array of bodies (by reference!) this behavior is applied to.\n\n     "
                  }
                ],
                "description": "Get the array of bodies (by reference!) this behavior is applied to.",
                "short_description": "Get the array of bodies (by reference!) this behavior is applied to.",
                "line": 59,
                "aliases": [],
                "children": [],
                "file": "src/core/behavior.js",
                "name": "getTargets",
                "name_prefix": "Behavior#",
                "path": "Behavior.prototype.getTargets",
                "outFile": "behavior.html#Behavior.prototype.getTargets"
              },
              {
                "id": "Behavior#init",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "options",
                        "types": [
                          "Object"
                        ],
                        "description": " The configuration options passed by the factory\n\n     "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "options",
                    "types": [
                      "Object"
                    ],
                    "description": " The configuration options passed by the factory\n\n     "
                  }
                ],
                "internal": true,
                "description": "Initialization. Internal use.\n/\n       init: function( options ){\n           \n           this.options = Physics.util.options( defaults );\n           this.options( options );\n       },\n\n       /**\nBehavior#applyTo( arr ) -> this\n- arr (Array): Array of bodies to apply this behavior to. Specify `true` for all objects in world.\n\nApply the behavior to a group of bodies.",
                "short_description": "Initialization. Internal use.\n/\n       init: function( options ){\n           \n           this.options = Physics.util.options( defaults );\n           this.options( options );\n       },\n",
                "line": 43,
                "aliases": [],
                "children": [],
                "file": "src/core/behavior.js",
                "name": "init",
                "name_prefix": "Behavior#",
                "path": "Behavior.prototype.init",
                "outFile": "behavior.html#Behavior.prototype.init"
              },
              {
                "id": "Behavior#setWorld",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "world",
                        "types": [
                          "Object"
                        ],
                        "description": " The world (or null)\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "this"
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "world",
                    "types": [
                      "Object"
                    ],
                    "description": " The world (or null)\n\n     "
                  }
                ],
                "description": "Set which world to apply to.\n\nUsually this is called internally. Shouldn't be a need to call this yourself usually.",
                "short_description": "Set which world to apply to.\n",
                "line": 72,
                "aliases": [],
                "children": [],
                "file": "src/core/behavior.js",
                "name": "setWorld",
                "name_prefix": "Behavior#",
                "path": "Behavior.prototype.setWorld",
                "outFile": "behavior.html#Behavior.prototype.setWorld"
              }
            ],
            "file": "src/core/behavior.js",
            "subclasses": [],
            "name": "Behavior",
            "path": "Behavior",
            "outFile": "behavior.html"
          }
        ],
        "file": "src/intro.js",
        "name": "Classes",
        "path": "Classes",
        "outFile": "intro.html#Classes"
      },
      {
        "id": "Physics",
        "type": "namespace",
        "related_to": "Physics.world",
        "description": "The top-level namespace. All of PhysicsJS is contained in\nthe `Physics` namespace.\n\nIt may be invoked as a function to create a world instance.\n\nexample:\n\n```javascript\nPhysics( cfg, function( world ) {\n    // use world\n}); // returns world\n```",
        "short_description": "The top-level namespace. All of PhysicsJS is contained in\nthe `Physics` namespace.\n",
        "line": 35,
        "aliases": [
          "Physics.world.new"
        ],
        "children": [
          {
            "id": "Physics.behavior",
            "type": "class method",
            "signatures": [
              {
                "arguments": [
                  {
                    "name": "name",
                    "types": [
                      "String"
                    ],
                    "description": " The name of the behavior to create\n\n "
                  },
                  {
                    "name": "options",
                    "optional": true,
                    "types": [
                      "Object"
                    ],
                    "description": " The configuration for that behavior ( depends on behavior )\n\n "
                  }
                ],
                "returns": [
                  {
                    "type": "Behavior"
                  }
                ]
              }
            ],
            "arguments": [
              {
                "name": "name",
                "types": [
                  "String"
                ],
                "description": " The name of the behavior to create\n\n "
              },
              {
                "name": "options",
                "types": [
                  "Object"
                ],
                "description": " The configuration for that behavior ( depends on behavior )\n\n "
              }
            ],
            "related_to": "Physics.util.decorator",
            "description": "Factory function for creating Behaviors.\n\nVisit [the PhysicsJS wiki on Behaviors](https://github.com/wellcaffeinated/PhysicsJS/wiki/Behaviors)\nfor usage documentation.",
            "short_description": "Factory function for creating Behaviors.\n",
            "line": 17,
            "aliases": [],
            "children": [],
            "file": "src/core/behavior.js",
            "name": "behavior",
            "name_prefix": "Physics.",
            "path": "Physics.behavior",
            "outFile": "behavior.html#Physics.behavior"
          },
          {
            "id": "Physics.noConflict",
            "type": "class method",
            "signatures": [
              {
                "arguments": [],
                "returns": [
                  {
                    "type": "Physics"
                  }
                ]
              }
            ],
            "description": "Restore the original reference to the global window.Physics variable.\n\nDoes nothing if PhysicsJS doesn't have a reference in global scope",
            "short_description": "Restore the original reference to the global window.Physics variable.\n",
            "line": 12,
            "aliases": [],
            "children": [],
            "file": "src/util/noconflict.js",
            "name": "noConflict",
            "name_prefix": "Physics.",
            "path": "Physics.noConflict",
            "outFile": "noconflict.html#Physics.noConflict"
          },
          {
            "id": "Physics.util",
            "type": "namespace",
            "description": "Namespace for utility functions. It contains a subset of\nthe [lodash API](http://lodash.com/docs).",
            "short_description": "Namespace for utility functions. It contains a subset of\nthe [lodash API](http://lodash.com/docs).",
            "line": 46,
            "aliases": [],
            "children": [
              {
                "id": "Physics.util.decorator",
                "type": "class method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "type",
                        "types": [
                          "String"
                        ],
                        "description": " The name of the factory you are creating\n\n "
                      },
                      {
                        "name": "protoDef",
                        "optional": true,
                        "types": [
                          "Object"
                        ],
                        "description": " The top-level prototype\n\n "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Function",
                        "description": " The factory function\n\n "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "type",
                    "types": [
                      "String"
                    ],
                    "description": " The name of the factory you are creating\n\n "
                  },
                  {
                    "name": "protoDef",
                    "types": [
                      "Object"
                    ],
                    "description": " The top-level prototype\n\n "
                  }
                ],
                "returns": [
                  {
                    "type": "Function",
                    "description": " The factory function\n\n "
                  }
                ],
                "related_to": "factory",
                "description": "Facilitates creation of decorator factory functions.\n\nSee the [[factory]] definition for the factory signatures.\n[For full documentation and examples, please visit the wiki](https://github.com/wellcaffeinated/PhysicsJS/wiki/Fundamentals#the-factory-pattern).\n\nExample:\n\n```javascript\nvar factory = Physics.util.decorator('factory', {\n     // prototype methods...\n     method: function( args ){\n     }\n});\n\n// define\nfactory( 'name', 'parent-name', function( parent ){\n\n     // extend further...\n     return {\n         // overrides\n         init: function( cfg ){\n             parent.init.call(this, cfg);\n         }\n     };\n});\n\n// instantiate\nvar options = { key: 'val' };\nvar instance = factory( 'name', options );\n```",
                "short_description": "Facilitates creation of decorator factory functions.\n",
                "line": 38,
                "aliases": [],
                "children": [],
                "file": "src/util/decorator.js",
                "name": "decorator",
                "name_prefix": "Physics.util.",
                "path": "Physics.util.decorator",
                "outFile": "decorator.html#Physics.util.decorator"
              },
              {
                "id": "Physics.util.indexOf",
                "type": "class method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "arr",
                        "types": [
                          "Array"
                        ],
                        "description": " The array to search\n\n "
                      },
                      {
                        "name": "value",
                        "types": [
                          "Mixed"
                        ],
                        "description": " The value to find\n\n "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Number",
                        "description": " The index of `value` in the array OR `-1` if not found\n\n "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "arr",
                    "types": [
                      "Array"
                    ],
                    "description": " The array to search\n\n "
                  },
                  {
                    "name": "value",
                    "types": [
                      "Mixed"
                    ],
                    "description": " The value to find\n\n "
                  }
                ],
                "returns": [
                  {
                    "type": "Number",
                    "description": " The index of `value` in the array OR `-1` if not found\n\n "
                  }
                ],
                "description": "Fast indexOf implementation.",
                "short_description": "Fast indexOf implementation.",
                "line": 9,
                "aliases": [],
                "children": [],
                "file": "src/util/helpers.js",
                "name": "indexOf",
                "name_prefix": "Physics.util.",
                "path": "Physics.util.indexOf",
                "outFile": "helpers.html#Physics.util.indexOf"
              },
              {
                "id": "Physics.util.options",
                "type": "class method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "def",
                        "types": [
                          "Object"
                        ],
                        "description": " Default options to set\n\n "
                      },
                      {
                        "name": "target",
                        "optional": true,
                        "types": [
                          "Object"
                        ],
                        "description": " Where to copy the options to. Defaults to the returned function.\n\n "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Function",
                        "description": " The options function\n\n "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "def",
                    "types": [
                      "Object"
                    ],
                    "description": " Default options to set\n\n "
                  },
                  {
                    "name": "target",
                    "types": [
                      "Object"
                    ],
                    "description": " Where to copy the options to. Defaults to the returned function.\n\n "
                  }
                ],
                "returns": [
                  {
                    "type": "Function",
                    "description": " The options function\n\n "
                  }
                ],
                "description": "Options helper to keep track of options. Call it with a config object. Access options directly on the function.\n\nExample:\n\n```javascript\nthis.options = Physics.util.options({ foo: 'bar', opt: 'def' });\nthis.options({ opt: 'myVal' });\n\nthis.options.foo; // === 'bar'\nthis.options.def; // === 'myVal'\n\n// can also change defaults later\nthis.options.defaults({ foo: 'baz' });\n\n// can add a change callback\nthis.options.onChange(function( opts ){\n    // some option changed\n    // opts is the target\n});\n```",
                "short_description": "Options helper to keep track of options. Call it with a config object. Access options directly on the function.\n",
                "line": 51,
                "aliases": [],
                "children": [],
                "file": "src/util/helpers.js",
                "name": "options",
                "name_prefix": "Physics.util.",
                "path": "Physics.util.options",
                "outFile": "helpers.html#Physics.util.options"
              },
              {
                "id": "Physics.util.pubsub",
                "type": "class",
                "description": "Fast pubsub implementation.\n\nCan be mixed into other classes easily.",
                "short_description": "Fast pubsub implementation.\n",
                "line": 10,
                "aliases": [],
                "children": [
                  {
                    "id": "Physics.util.pubsub#emit",
                    "type": "instance method",
                    "signatures": [
                      {
                        "arguments": [
                          {
                            "name": "topic",
                            "types": [
                              "String"
                            ],
                            "description": " The topic name\n\n     "
                          },
                          {
                            "name": "data",
                            "optional": true,
                            "types": [
                              "Mixed"
                            ],
                            "description": " The data to send\n\n     "
                          }
                        ],
                        "returns": [
                          {
                            "type": "this"
                          }
                        ]
                      }
                    ],
                    "arguments": [
                      {
                        "name": "topic",
                        "types": [
                          "String"
                        ],
                        "description": " The topic name\n\n     "
                      },
                      {
                        "name": "data",
                        "types": [
                          "Mixed"
                        ],
                        "description": " The data to send\n\n     "
                      }
                    ],
                    "description": "Publish data to a topic.",
                    "short_description": "Publish data to a topic.",
                    "line": 146,
                    "aliases": [],
                    "children": [],
                    "file": "src/util/pubsub.js",
                    "name": "emit",
                    "name_prefix": "Physics.util.pubsub#",
                    "path": "Physics.util.pubsub.prototype.emit",
                    "outFile": "pubsub.html#Physics.util.pubsub.prototype.emit"
                  },
                  {
                    "id": "Physics.util.pubsub#off",
                    "type": "instance method",
                    "signatures": [
                      {
                        "arguments": [
                          {
                            "name": "topic",
                            "types": [
                              "String"
                            ],
                            "description": " topic The topic name. Specify `true` to remove all listeners for all topics\n\n     "
                          },
                          {
                            "name": "fn",
                            "types": [
                              "Function"
                            ],
                            "description": " fn The original callback function. Specify `true` to remove all listeners for specified topic\n\n     "
                          }
                        ],
                        "returns": [
                          {
                            "type": "this"
                          }
                        ]
                      },
                      {
                        "arguments": [
                          {
                            "name": "topicCfg",
                            "types": [
                              "Object"
                            ],
                            "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                          }
                        ],
                        "returns": [
                          {
                            "type": "this"
                          }
                        ]
                      }
                    ],
                    "arguments": [
                      {
                        "name": "topic",
                        "types": [
                          "String"
                        ],
                        "description": " topic The topic name. Specify `true` to remove all listeners for all topics\n\n     "
                      },
                      {
                        "name": "topicCfg",
                        "types": [
                          "Object"
                        ],
                        "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                      },
                      {
                        "name": "fn",
                        "types": [
                          "Function"
                        ],
                        "description": " fn The original callback function. Specify `true` to remove all listeners for specified topic\n\n     "
                      }
                    ],
                    "description": "Unsubscribe callback(s) from topic(s).",
                    "short_description": "Unsubscribe callback(s) from topic(s).",
                    "line": 85,
                    "aliases": [],
                    "children": [],
                    "file": "src/util/pubsub.js",
                    "name": "off",
                    "name_prefix": "Physics.util.pubsub#",
                    "path": "Physics.util.pubsub.prototype.off",
                    "outFile": "pubsub.html#Physics.util.pubsub.prototype.off"
                  },
                  {
                    "id": "Physics.util.pubsub#on",
                    "type": "instance method",
                    "signatures": [
                      {
                        "arguments": [
                          {
                            "name": "topic",
                            "types": [
                              "String"
                            ],
                            "description": " The topic name\n\n     "
                          },
                          {
                            "name": "fn",
                            "arguments": [
                              {
                                "name": "data"
                              },
                              {
                                "name": "event"
                              }
                            ],
                            "callback": true,
                            "types": [
                              "Function"
                            ],
                            "description": " The callback function (if not using Object as previous argument)\n\n     "
                          },
                          {
                            "name": "scope",
                            "optional": true,
                            "types": [
                              "Object"
                            ],
                            "description": " The scope to bind callback to\n\n     "
                          },
                          {
                            "name": "priority",
                            "optional": true,
                            "types": [
                              "Number"
                            ],
                            "description": " The priority of the callback (higher is earlier)\n\n     "
                          }
                        ],
                        "returns": [
                          {
                            "type": "this"
                          }
                        ]
                      },
                      {
                        "arguments": [
                          {
                            "name": "topicConfig",
                            "types": [
                              "Object"
                            ],
                            "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                          },
                          {
                            "name": "scope",
                            "optional": true,
                            "types": [
                              "Object"
                            ],
                            "description": " The scope to bind callback to\n\n     "
                          },
                          {
                            "name": "priority",
                            "optional": true,
                            "types": [
                              "Number"
                            ],
                            "description": " The priority of the callback (higher is earlier)\n\n     "
                          }
                        ],
                        "returns": [
                          {
                            "type": "this"
                          }
                        ]
                      }
                    ],
                    "arguments": [
                      {
                        "name": "topic",
                        "types": [
                          "String"
                        ],
                        "description": " The topic name\n\n     "
                      },
                      {
                        "name": "topicConfig",
                        "types": [
                          "Object"
                        ],
                        "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                      },
                      {
                        "name": "fn",
                        "types": [
                          "Function"
                        ],
                        "description": " The callback function (if not using Object as previous argument)\n\n     "
                      },
                      {
                        "name": "data",
                        "types": [
                          "Mixed"
                        ],
                        "description": " The data sent from the call to `.emit()`\n\n     "
                      },
                      {
                        "name": "event",
                        "types": [
                          "Object"
                        ],
                        "description": " Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n\n     "
                      },
                      {
                        "name": "scope",
                        "types": [
                          "Object"
                        ],
                        "description": " The scope to bind callback to\n\n     "
                      },
                      {
                        "name": "priority",
                        "types": [
                          "Number"
                        ],
                        "description": " The priority of the callback (higher is earlier)\n\n     "
                      }
                    ],
                    "description": "Subscribe callback(s) to a topic(s).",
                    "short_description": "Subscribe callback(s) to a topic(s).",
                    "line": 32,
                    "aliases": [],
                    "children": [],
                    "file": "src/util/pubsub.js",
                    "name": "on",
                    "name_prefix": "Physics.util.pubsub#",
                    "path": "Physics.util.pubsub.prototype.on",
                    "outFile": "pubsub.html#Physics.util.pubsub.prototype.on"
                  },
                  {
                    "id": "Physics.util.pubsub#one",
                    "type": "instance method",
                    "signatures": [
                      {
                        "arguments": [
                          {
                            "name": "topic",
                            "types": [
                              "String"
                            ],
                            "description": " The topic name\n\n     "
                          },
                          {
                            "name": "fn",
                            "arguments": [
                              {
                                "name": "data"
                              },
                              {
                                "name": "event"
                              }
                            ],
                            "callback": true,
                            "types": [
                              "Function"
                            ],
                            "description": " The callback function (if not using Object as previous argument)\n\n     "
                          },
                          {
                            "name": "scope",
                            "optional": true,
                            "types": [
                              "Object"
                            ],
                            "description": " The scope to bind callback to\n\n     "
                          },
                          {
                            "name": "priority",
                            "optional": true,
                            "types": [
                              "Number"
                            ],
                            "description": " The priority of the callback (higher is earlier)\n\n     "
                          }
                        ],
                        "returns": [
                          {
                            "type": "this"
                          }
                        ]
                      },
                      {
                        "arguments": [
                          {
                            "name": "topicConfig",
                            "types": [
                              "Object"
                            ],
                            "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                          },
                          {
                            "name": "scope",
                            "optional": true,
                            "types": [
                              "Object"
                            ],
                            "description": " The scope to bind callback to\n\n     "
                          },
                          {
                            "name": "priority",
                            "optional": true,
                            "types": [
                              "Number"
                            ],
                            "description": " The priority of the callback (higher is earlier)\n\n     "
                          }
                        ],
                        "returns": [
                          {
                            "type": "this"
                          }
                        ]
                      }
                    ],
                    "arguments": [
                      {
                        "name": "topic",
                        "types": [
                          "String"
                        ],
                        "description": " The topic name\n\n     "
                      },
                      {
                        "name": "topicConfig",
                        "types": [
                          "Object"
                        ],
                        "description": " A config with key/value pairs of `{ topic: callbackFn, ... }`\n\n     "
                      },
                      {
                        "name": "fn",
                        "types": [
                          "Function"
                        ],
                        "description": " The callback function (if not using Object as previous argument)\n\n     "
                      },
                      {
                        "name": "data",
                        "types": [
                          "Mixed"
                        ],
                        "description": " The data sent from the call to `.emit()`\n\n     "
                      },
                      {
                        "name": "event",
                        "types": [
                          "Object"
                        ],
                        "description": " Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n\n     "
                      },
                      {
                        "name": "scope",
                        "types": [
                          "Object"
                        ],
                        "description": " The scope to bind callback to\n\n     "
                      },
                      {
                        "name": "priority",
                        "types": [
                          "Number"
                        ],
                        "description": " The priority of the callback (higher is earlier)\n\n     "
                      }
                    ],
                    "description": "Subscribe callback(s) to a topic(s), but only ONCE.",
                    "short_description": "Subscribe callback(s) to a topic(s), but only ONCE.",
                    "line": 197,
                    "aliases": [],
                    "children": [],
                    "file": "src/util/pubsub.js",
                    "name": "one",
                    "name_prefix": "Physics.util.pubsub#",
                    "path": "Physics.util.pubsub.prototype.one",
                    "outFile": "pubsub.html#Physics.util.pubsub.prototype.one"
                  }
                ],
                "file": "src/util/pubsub.js",
                "subclasses": [],
                "name": "pubsub",
                "name_prefix": "Physics.util.",
                "path": "Physics.util.pubsub",
                "outFile": "pubsub.html"
              },
              {
                "id": "Physics.util.ticker",
                "type": "class",
                "description": "The Ticker _singleton_ for easily binding callbacks to animation loops (requestAnimationFrame).\n\nRequires window.requestAnimationFrame... so polyfill it if you need to.",
                "short_description": "The Ticker _singleton_ for easily binding callbacks to animation loops (requestAnimationFrame).\n",
                "line": 8,
                "aliases": [],
                "children": [
                  {
                    "id": "Physics.util.ticker.isActive",
                    "type": "class method",
                    "signatures": [
                      {
                        "arguments": [],
                        "returns": [
                          {
                            "type": "Boolean"
                          }
                        ]
                      }
                    ],
                    "returns": [
                      {
                        "type": "Boolean",
                        "description": " `true` if running, `false` otherwise.\n\n "
                      }
                    ],
                    "description": "Determine if ticker is currently running.",
                    "short_description": "Determine if ticker is currently running.",
                    "line": 92,
                    "aliases": [],
                    "children": [],
                    "file": "src/util/ticker.js",
                    "name": "isActive",
                    "name_prefix": "Physics.util.ticker.",
                    "path": "Physics.util.ticker.isActive",
                    "outFile": "ticker.html#Physics.util.ticker.isActive"
                  },
                  {
                    "id": "Physics.util.ticker.off",
                    "type": "class method",
                    "signatures": [
                      {
                        "arguments": [
                          {
                            "name": "listener",
                            "types": [
                              "Function"
                            ],
                            "description": " The callback function previously bound\n\n "
                          }
                        ],
                        "returns": [
                          {
                            "type": "this"
                          }
                        ]
                      }
                    ],
                    "arguments": [
                      {
                        "name": "listener",
                        "types": [
                          "Function"
                        ],
                        "description": " The callback function previously bound\n\n "
                      }
                    ],
                    "description": "Unsubscribe a callback from the ticker.",
                    "short_description": "Unsubscribe a callback from the ticker.",
                    "line": 80,
                    "aliases": [],
                    "children": [],
                    "file": "src/util/ticker.js",
                    "name": "off",
                    "name_prefix": "Physics.util.ticker.",
                    "path": "Physics.util.ticker.off",
                    "outFile": "ticker.html#Physics.util.ticker.off"
                  },
                  {
                    "id": "Physics.util.ticker.on",
                    "type": "class method",
                    "signatures": [
                      {
                        "arguments": [
                          {
                            "name": "listener",
                            "arguments": [
                              {
                                "name": "time",
                                "description": " The current timestamp\n\n ",
                                "types": [
                                  "Number"
                                ]
                              }
                            ],
                            "callback": true,
                            "types": [
                              "Function"
                            ],
                            "description": " The callback function\n\n "
                          }
                        ],
                        "returns": [
                          {
                            "type": "this"
                          }
                        ]
                      }
                    ],
                    "arguments": [
                      {
                        "name": "listener",
                        "types": [
                          "Function"
                        ],
                        "description": " The callback function\n\n "
                      },
                      {
                        "name": "time",
                        "types": [
                          "Number"
                        ],
                        "description": " The current timestamp\n\n "
                      }
                    ],
                    "description": "Subscribe a callback to the ticker.",
                    "short_description": "Subscribe a callback to the ticker.",
                    "line": 68,
                    "aliases": [],
                    "children": [],
                    "file": "src/util/ticker.js",
                    "name": "on",
                    "name_prefix": "Physics.util.ticker.",
                    "path": "Physics.util.ticker.on",
                    "outFile": "ticker.html#Physics.util.ticker.on"
                  },
                  {
                    "id": "Physics.util.ticker.start",
                    "type": "class method",
                    "signatures": [
                      {
                        "arguments": [],
                        "returns": [
                          {
                            "type": "this"
                          }
                        ]
                      }
                    ],
                    "description": "Start the ticker",
                    "short_description": "Start the ticker",
                    "line": 43,
                    "aliases": [],
                    "children": [],
                    "file": "src/util/ticker.js",
                    "name": "start",
                    "name_prefix": "Physics.util.ticker.",
                    "path": "Physics.util.ticker.start",
                    "outFile": "ticker.html#Physics.util.ticker.start"
                  },
                  {
                    "id": "Physics.util.ticker.stop",
                    "type": "class method",
                    "signatures": [
                      {
                        "arguments": [],
                        "returns": [
                          {
                            "type": "this"
                          }
                        ]
                      }
                    ],
                    "description": "Stop the ticker",
                    "short_description": "Stop the ticker",
                    "line": 55,
                    "aliases": [],
                    "children": [],
                    "file": "src/util/ticker.js",
                    "name": "stop",
                    "name_prefix": "Physics.util.ticker.",
                    "path": "Physics.util.ticker.stop",
                    "outFile": "ticker.html#Physics.util.ticker.stop"
                  }
                ],
                "file": "src/util/ticker.js",
                "subclasses": [],
                "name": "ticker",
                "name_prefix": "Physics.util.",
                "path": "Physics.util.ticker",
                "outFile": "ticker.html"
              }
            ],
            "file": "src/intro.js",
            "name": "util",
            "name_prefix": "Physics.",
            "path": "Physics.util",
            "outFile": "intro.html#Physics.util"
          },
          {
            "id": "Physics.world",
            "type": "class",
            "related_to": "new Physics.world",
            "description": "The world class and factory function.\n\nHere is a test link [[ new Physics.world ]]\n\nExample:\n\n```javascript\nPhysics( cfg, function( world ) {\n    // use world\n\n}); // returns world\n```",
            "short_description": "The world class and factory function.\n",
            "line": 17,
            "aliases": [],
            "children": [
              {
                "id": "Physics.world#add",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "things",
                        "types": [
                          "Object",
                          "Array"
                        ],
                        "description": " The thing, or array of things (body, behavior, integrator, or renderer) to add.\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "this"
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "things",
                    "types": [
                      "Object",
                      "Array"
                    ],
                    "description": " The thing, or array of things (body, behavior, integrator, or renderer) to add.\n\n     "
                  }
                ],
                "chainable": true,
                "description": "Multipurpose add method. Add one or many bodies, behaviors, integrators, renderers...",
                "short_description": "Multipurpose add method. Add one or many bodies, behaviors, integrators, renderers...",
                "line": 143,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "add",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.add",
                "outFile": "world.html#Physics.world.prototype.add"
              },
              {
                "id": "Physics.world#addBehavior",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "behavior",
                        "types": [
                          "Behavior"
                        ],
                        "description": " The behavior to add\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "this"
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "behavior",
                    "types": [
                      "Behavior"
                    ],
                    "description": " The behavior to add\n\n     "
                  }
                ],
                "chainable": true,
                "description": "Add a behavior to the world",
                "short_description": "Add a behavior to the world",
                "line": 390,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "addBehavior",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.addBehavior",
                "outFile": "world.html#Physics.world.prototype.addBehavior"
              },
              {
                "id": "Physics.world#addBody",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "body",
                        "types": [
                          "Body"
                        ],
                        "description": " The behavior to add\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "this"
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "body",
                    "types": [
                      "Body"
                    ],
                    "description": " The behavior to add\n\n     "
                  }
                ],
                "chainable": true,
                "description": "Add a body to the world",
                "short_description": "Add a body to the world",
                "line": 458,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "addBody",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.addBody",
                "outFile": "world.html#Physics.world.prototype.addBody"
              },
              {
                "id": "Physics.world#destroy",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": []
                  }
                ],
                "description": "Destroy the world.\n(Bwahahahahaha!)",
                "short_description": "Destroy the world.\n(Bwahahahahaha!)",
                "line": 672,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "destroy",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.destroy",
                "outFile": "world.html#Physics.world.prototype.destroy"
              },
              {
                "id": "Physics.world#find",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "rules",
                        "types": [
                          "Object"
                        ],
                        "description": " Query rules\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Array"
                      }
                    ]
                  },
                  {
                    "arguments": [
                      {
                        "name": "filter",
                        "arguments": [
                          {
                            "name": "body",
                            "description": " Each body in the world\n\n     ",
                            "types": [
                              "Body"
                            ]
                          }
                        ],
                        "callback": true,
                        "types": [
                          "Function"
                        ],
                        "description": " Filter function called to check bodies\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Array"
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "rules",
                    "types": [
                      "Object"
                    ],
                    "description": " Query rules\n\n     "
                  },
                  {
                    "name": "filter",
                    "types": [
                      "Function"
                    ],
                    "description": " Filter function called to check bodies\n\n     "
                  },
                  {
                    "name": "body",
                    "types": [
                      "Body"
                    ],
                    "description": " Each body in the world\n\n     "
                  }
                ],
                "related_to": "Physics.query",
                "description": "Find all matching bodies based on query rules.",
                "short_description": "Find all matching bodies based on query rules.",
                "line": 547,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "find",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.find",
                "outFile": "world.html#Physics.world.prototype.find"
              },
              {
                "id": "Physics.world#findOne",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "rules",
                        "types": [
                          "Object"
                        ],
                        "description": " Query rules.\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Body"
                      },
                      {
                        "type": false
                      }
                    ]
                  },
                  {
                    "arguments": [
                      {
                        "name": "filter",
                        "arguments": [
                          {
                            "name": "body",
                            "description": " Each body in the world\n\n     ",
                            "types": [
                              "Body"
                            ]
                          }
                        ],
                        "callback": true,
                        "types": [
                          "Function"
                        ],
                        "description": " Filter function called to check bodies\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Body"
                      },
                      {
                        "type": false
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "rules",
                    "types": [
                      "Object"
                    ],
                    "description": " Query rules.\n\n     "
                  },
                  {
                    "name": "filter",
                    "types": [
                      "Function"
                    ],
                    "description": " Filter function called to check bodies\n\n     "
                  },
                  {
                    "name": "body",
                    "types": [
                      "Body"
                    ],
                    "description": " Each body in the world\n\n     "
                  }
                ],
                "related_to": "Physics.query",
                "description": "Find first matching body based on query rules.",
                "short_description": "Find first matching body based on query rules.",
                "line": 529,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "findOne",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.findOne",
                "outFile": "world.html#Physics.world.prototype.findOne"
              },
              {
                "id": "Physics.world#getBehaviors",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [],
                    "returns": [
                      {
                        "type": "Array"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Array",
                    "description": " Array of behaviors\n\n     "
                  }
                ],
                "description": "Get copied list of behaviors in the world",
                "short_description": "Get copied list of behaviors in the world",
                "line": 415,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "getBehaviors",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.getBehaviors",
                "outFile": "world.html#Physics.world.prototype.getBehaviors"
              },
              {
                "id": "Physics.world#getBodies",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [],
                    "returns": [
                      {
                        "type": "Array"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Array",
                    "description": " Array of bodies\n\n     "
                  }
                ],
                "description": "Get copied list of bodies in the world",
                "short_description": "Get copied list of bodies in the world",
                "line": 483,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "getBodies",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.getBodies",
                "outFile": "world.html#Physics.world.prototype.getBodies"
              },
              {
                "id": "Physics.world#has",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "thing",
                        "types": [
                          "Object"
                        ],
                        "description": " The thing to test\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Boolean",
                        "description": " `true` if thing is in the world, `false` otherwise.\n\n     "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "thing",
                    "types": [
                      "Object"
                    ],
                    "description": " The thing to test\n\n     "
                  }
                ],
                "returns": [
                  {
                    "type": "Boolean",
                    "description": " `true` if thing is in the world, `false` otherwise.\n\n     "
                  }
                ],
                "chainable": true,
                "description": "Determine if a thing has been added to world.",
                "short_description": "Determine if a thing has been added to world.",
                "line": 244,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "has",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.has",
                "outFile": "world.html#Physics.world.prototype.has"
              },
              {
                "id": "Physics.world#init",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "options",
                        "optional": true,
                        "types": [
                          "Object"
                        ],
                        "description": " configuration options (see constructor)\n\n     "
                      },
                      {
                        "name": "fn",
                        "arguments": [
                          {
                            "name": "world"
                          },
                          {
                            "name": "Physics"
                          }
                        ],
                        "callback": true,
                        "optional": true,
                        "types": [
                          "Function",
                          "Array"
                        ],
                        "description": " Callback function or array of callbacks called with this === world\n\n     "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "options",
                    "types": [
                      "Object"
                    ],
                    "description": " configuration options (see constructor)\n\n     "
                  },
                  {
                    "name": "fn",
                    "types": [
                      "Function",
                      "Array"
                    ],
                    "description": " Callback function or array of callbacks called with this === world\n\n     "
                  }
                ],
                "internal": true,
                "related_to": "new Physics.world",
                "description": "Initialization",
                "short_description": "Initialization",
                "line": 85,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "init",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.init",
                "outFile": "world.html#Physics.world.prototype.init"
              },
              {
                "id": "Physics.world#integrator",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "integrator",
                        "optional": true,
                        "types": [
                          "Integrator"
                        ],
                        "description": " The integrator to set on the world\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Integrator",
                        "description": " The currently set integrator if `integrator` not specified\n\n     "
                      },
                      {
                        "type": "this",
                        "description": " for chaining if `integrator` specified\n\n     "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "integrator",
                    "types": [
                      "Integrator"
                    ],
                    "description": " The integrator to set on the world\n\n     "
                  }
                ],
                "returns": [
                  {
                    "type": "Integrator",
                    "description": " The currently set integrator if `integrator` not specified\n\n     "
                  },
                  {
                    "type": "this",
                    "description": " for chaining if `integrator` specified\n\n     "
                  }
                ],
                "chainable": true,
                "description": "Get or Set the integrator",
                "short_description": "Get or Set the integrator",
                "line": 290,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "integrator",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.integrator",
                "outFile": "world.html#Physics.world.prototype.integrator"
              },
              {
                "id": "Physics.world#isPaused",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [],
                    "returns": [
                      {
                        "type": "Boolean"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Boolean",
                    "description": " Returns `true` if world is paused, `false` otherwise.\n\n     "
                  }
                ],
                "description": "Determine if world is paused.",
                "short_description": "Determine if world is paused.",
                "line": 661,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "isPaused",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.isPaused",
                "outFile": "world.html#Physics.world.prototype.isPaused"
              },
              {
                "id": "Physics.world#iterate",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "dt",
                        "types": [
                          "Number"
                        ],
                        "description": " The timestep\n\n     "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "dt",
                    "types": [
                      "Number"
                    ],
                    "description": " The timestep\n\n     "
                  }
                ],
                "internal": true,
                "description": "Do a single iteration.",
                "short_description": "Do a single iteration.",
                "line": 562,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "iterate",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.iterate",
                "outFile": "world.html#Physics.world.prototype.iterate"
              },
              {
                "id": "Physics.world#options",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "cfg",
                        "types": [
                          "Object"
                        ],
                        "description": " configuration options (see constructor)\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Object",
                        "description": " Options container\n\n     "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "options",
                    "types": [
                      "Object"
                    ],
                    "description": " configuration options (see constructor)\n\n     "
                  }
                ],
                "returns": [
                  {
                    "type": "Object",
                    "description": " Options container\n\n     "
                  }
                ],
                "description": "Set config options. Also access options by `.options.<option>`.",
                "short_description": "Set config options. Also access options by `.options.<option>`.",
                "line": 135,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "options",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.options",
                "outFile": "world.html#Physics.world.prototype.options"
              },
              {
                "id": "Physics.world#pause",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [],
                    "returns": [
                      {
                        "type": "this"
                      }
                    ]
                  }
                ],
                "chainable": true,
                "description": "Pause the world (step calls do nothing).",
                "short_description": "Pause the world (step calls do nothing).",
                "line": 636,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "pause",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.pause",
                "outFile": "world.html#Physics.world.prototype.pause"
              },
              {
                "id": "Physics.world#remove",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "things",
                        "types": [
                          "Object",
                          "Array"
                        ],
                        "description": " The thing, or array of things (body, behavior, integrator, or renderer) to remove.\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "this"
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "things",
                    "types": [
                      "Object",
                      "Array"
                    ],
                    "description": " The thing, or array of things (body, behavior, integrator, or renderer) to remove.\n\n     "
                  }
                ],
                "chainable": true,
                "description": "Multipurpose remove method. Remove one or many bodies, behaviors, integrators, renderers...",
                "short_description": "Multipurpose remove method. Remove one or many bodies, behaviors, integrators, renderers...",
                "line": 191,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "remove",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.remove",
                "outFile": "world.html#Physics.world.prototype.remove"
              },
              {
                "id": "Physics.world#removeBehavior",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "behavior",
                        "types": [
                          "Behavior"
                        ],
                        "description": " The behavior to remove\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "this"
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "behavior",
                    "types": [
                      "Behavior"
                    ],
                    "description": " The behavior to remove\n\n     "
                  }
                ],
                "chainable": true,
                "description": "Remove a behavior from the world",
                "short_description": "Remove a behavior from the world",
                "line": 427,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "removeBehavior",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.removeBehavior",
                "outFile": "world.html#Physics.world.prototype.removeBehavior"
              },
              {
                "id": "Physics.world#removeBody",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "body",
                        "types": [
                          "Body"
                        ],
                        "description": " The body to remove\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "this"
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "body",
                    "types": [
                      "Body"
                    ],
                    "description": " The body to remove\n\n     "
                  }
                ],
                "chainable": true,
                "description": "Remove a body from the world",
                "short_description": "Remove a body from the world",
                "line": 495,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "removeBody",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.removeBody",
                "outFile": "world.html#Physics.world.prototype.removeBody"
              },
              {
                "id": "Physics.world#render",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [],
                    "returns": [
                      {
                        "type": "this"
                      }
                    ]
                  }
                ],
                "chainable": true,
                "description": "Render current world state using the renderer",
                "short_description": "Render current world state using the renderer",
                "line": 616,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "render",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.render",
                "outFile": "world.html#Physics.world.prototype.render"
              },
              {
                "id": "Physics.world#renderer",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "renderer",
                        "optional": true,
                        "types": [
                          "Renderer"
                        ],
                        "description": " The renderer to set on the world\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Renderer",
                        "description": " The currently set renderer if `renderer` not specified\n\n     "
                      },
                      {
                        "type": "this",
                        "description": " for chaining if `renderer` specified\n\n     "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "renderer",
                    "types": [
                      "Renderer"
                    ],
                    "description": " The renderer to set on the world\n\n     "
                  }
                ],
                "returns": [
                  {
                    "type": "Renderer",
                    "description": " The currently set renderer if `renderer` not specified\n\n     "
                  },
                  {
                    "type": "this",
                    "description": " for chaining if `renderer` specified\n\n     "
                  }
                ],
                "chainable": true,
                "description": "Get or Set the renderer",
                "short_description": "Get or Set the renderer",
                "line": 330,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "renderer",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.renderer",
                "outFile": "world.html#Physics.world.prototype.renderer"
              },
              {
                "id": "Physics.world#step",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "now",
                        "types": [
                          "Number"
                        ],
                        "description": " now Current unix timestamp\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "this"
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "now",
                    "types": [
                      "Number"
                    ],
                    "description": " now Current unix timestamp\n\n     "
                  }
                ],
                "chainable": true,
                "description": "Do a single step.",
                "short_description": "Do a single step.",
                "line": 573,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "step",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.step",
                "outFile": "world.html#Physics.world.prototype.step"
              },
              {
                "id": "Physics.world#timeStep",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "dt",
                        "optional": true,
                        "types": [
                          "Number"
                        ],
                        "description": " The time step for the world\n\n     "
                      }
                    ],
                    "returns": [
                      {
                        "type": "Number",
                        "description": " The currently set time step if `dt` not specified\n\n     "
                      },
                      {
                        "type": "this",
                        "description": " for chaining if `dt` specified\n\n     "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "dt",
                    "types": [
                      "Number"
                    ],
                    "description": " The time step for the world\n\n     "
                  }
                ],
                "returns": [
                  {
                    "type": "Number",
                    "description": " The currently set time step if `dt` not specified\n\n     "
                  },
                  {
                    "type": "this",
                    "description": " for chaining if `dt` specified\n\n     "
                  }
                ],
                "chainable": true,
                "description": "Get or Set the time step",
                "short_description": "Get or Set the time step",
                "line": 370,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "timeStep",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.timeStep",
                "outFile": "world.html#Physics.world.prototype.timeStep"
              },
              {
                "id": "Physics.world#unpause",
                "type": "instance method",
                "signatures": [
                  {
                    "arguments": [],
                    "returns": [
                      {
                        "type": "this"
                      }
                    ]
                  }
                ],
                "chainable": true,
                "description": "Unpause the world (step calls continue as usual).",
                "short_description": "Unpause the world (step calls continue as usual).",
                "line": 648,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "unpause",
                "name_prefix": "Physics.world#",
                "path": "Physics.world.prototype.unpause",
                "outFile": "world.html#Physics.world.prototype.unpause"
              },
              {
                "id": "new Physics.world",
                "type": "constructor",
                "signatures": [
                  {
                    "arguments": [
                      {
                        "name": "options",
                        "optional": true,
                        "types": [
                          "Object"
                        ],
                        "description": " configuration options\n\n   - options.timestep (Number = 1000.0/160): default timestep\n\n   ...\n\n "
                      },
                      {
                        "name": "fn",
                        "arguments": [
                          {
                            "name": "world"
                          },
                          {
                            "name": "Physics"
                          }
                        ],
                        "callback": true,
                        "optional": true,
                        "types": [
                          "Function",
                          "Array"
                        ],
                        "description": " Callback function or array of callbacks called with this === world\n\n "
                      }
                    ]
                  }
                ],
                "arguments": [
                  {
                    "name": "options",
                    "types": [
                      "Object"
                    ],
                    "description": " configuration options\n\n   - options.timestep (Number = 1000.0/160): default timestep\n\n   ...\n\n "
                  },
                  {
                    "name": "fn",
                    "types": [
                      "Function",
                      "Array"
                    ],
                    "description": " Callback function or array of callbacks called with this === world\n\n "
                  }
                ],
                "alias_of": "Physics",
                "description": "World Constructor.\n\nIf called with an array of functions, and any functions\nreturn a promise-like object, the remaining callbacks will\nbe called only when that promise is resolved.",
                "short_description": "World Constructor.\n",
                "line": 65,
                "aliases": [],
                "children": [],
                "file": "src/core/world.js",
                "name": "new",
                "name_prefix": "Physics.world.",
                "path": "Physics.world.new",
                "outFile": "world.html#Physics.world.new"
              }
            ],
            "file": "src/core/world.js",
            "subclasses": [],
            "name": "world",
            "name_prefix": "Physics.",
            "path": "Physics.world",
            "outFile": "world.html"
          }
        ],
        "file": "src/intro.js",
        "name": "Physics",
        "path": "Physics",
        "outFile": "intro.html#Physics"
      },
      {
        "id": "Special",
        "type": "namespace",
        "description": "",
        "short_description": "",
        "line": 55,
        "aliases": [],
        "children": [
          {
            "id": "factory",
            "type": "method",
            "signatures": [
              {
                "arguments": [
                  {
                    "name": "name",
                    "types": [
                      "String"
                    ],
                    "description": "  The class name\n\n "
                  },
                  {
                    "name": "parentName",
                    "optional": true,
                    "types": [
                      "String"
                    ],
                    "description": " The name of parent class to extend\n\n "
                  },
                  {
                    "name": "decorator",
                    "types": [
                      "Function"
                    ],
                    "description": " The decorator function that should define and return methods to extend (decorate) the base class\n\n "
                  },
                  {
                    "name": "cfg",
                    "optional": true,
                    "types": [
                      "Object"
                    ],
                    "description": " The configuration to pass to the class initializer\n\n "
                  }
                ]
              },
              {
                "arguments": [
                  {
                    "name": "name",
                    "types": [
                      "String"
                    ],
                    "description": "  The class name\n\n "
                  },
                  {
                    "name": "cfg",
                    "types": [
                      "Object"
                    ],
                    "description": " The configuration to pass to the class initializer\n\n "
                  }
                ],
                "returns": [
                  {
                    "type": "Object"
                  }
                ]
              }
            ],
            "arguments": [
              {
                "name": "name",
                "types": [
                  "String"
                ],
                "description": "  The class name\n\n "
              },
              {
                "name": "parentName",
                "types": [
                  "String"
                ],
                "description": " The name of parent class to extend\n\n "
              },
              {
                "name": "decorator",
                "types": [
                  "Function"
                ],
                "description": " The decorator function that should define and return methods to extend (decorate) the base class\n\n "
              },
              {
                "name": "cfg",
                "types": [
                  "Object"
                ],
                "description": " The configuration to pass to the class initializer\n\n "
              }
            ],
            "belongs_to": "Special",
            "description": "Factory function for definition and instantiation of subclasses.\n\nUse the first signature (once) to define it first.\nIf defining without the \"cfg\" parameter, void will be returned. Otherwise the class instance will be returned.",
            "short_description": "Factory function for definition and instantiation of subclasses.\n",
            "line": 129,
            "aliases": [],
            "children": [],
            "file": "src/util/decorator.js",
            "name": "factory",
            "path": "factory",
            "outFile": "decorator.html#factory"
          }
        ],
        "file": "src/intro.js",
        "name": "Special",
        "path": "Special",
        "outFile": "intro.html#Special"
      }
    ]
  }
}